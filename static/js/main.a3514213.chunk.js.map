{"version":3,"sources":["FeatureDialog.js","Graph.js","util.js","Sidebar.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["FeatureDialog","data","onHide","Modal","show","Header","closeButton","Title","Body","Object","entries","filter","entry","includes","map","key","value","style","display","maxHeight","margin","backgroundColor","minWidth","wordBreak","overflow","String","tags","keys","length","Footer","Button","variant","onClick","generatePaths","generateEdges","links","graph","currentLinkId","linkNum","currentLinkSet","i","link","original","id","push","source","x","y","target","Graph","React","forwardRef","props","ref","gref","useRef","path","drawPaths","blockSize","contigThickness","edgeThickness","color","width","height","steps","onFeatureClick","console","log","useMemo","G","Gp","nodes","seen","paths","pathNodes","split","j","curr","name","sequence","rest","concat","strand1","strand2","loop","reprocessGraph","colors","forEach","p","d3","d","create","max","Math","simulation","force","distance","strength","tick","useEffect","current","call","extent","scaleExtent","on","attr","transform","edges","endsWith","viewBox","toString","x1","y1","x2","y2","s1","t1","s2","t2","dp1","sqrt","dp2","pp","index","d1","d2","cx1","cy1","cx2","cy2","cpath","moveTo","bezierCurveTo","strokeWidth","stroke","fill","line","context","dx","dy","dr","drx","dry","xRot","largeArc","title","startsWith","replace","toLowerCase","darker","parseGFA","file","type","val","cigar","Sidebar","onColorChange","onPathDraw","Form","Group","Control","onChange","event","as","saveAs","svg","xmlns","cloneNode","fragment","window","location","href","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode","attributes","setAttributeNS","string","XMLSerializer","serializeToString","Blob","serialize","checked","Check","label","onData","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","className","NavDropdown","Item","App","useState","featureData","setFeatureData","dataset","setDataset","setGraph","error","setError","setColor","pathDraw","setPathDraw","a","fetch","result","ok","Error","statusText","text","undefined","message","onModal","c","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"8RAGO,SAASA,EAAT,GAA0C,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACpC,OACE,kBAACC,EAAA,EAAD,CAAOC,MAAM,EAAMF,OAAQA,GACzB,kBAACC,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,yBAGF,kBAACJ,EAAA,EAAMK,KAAP,KACE,2CACCC,OAAOC,QAAQT,GACbU,QAAO,SAAAC,GAAK,OAAK,CAAC,SAAU,SAAU,UAAW,QAAQC,SAASD,EAAM,OACxEE,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YACH,yBACED,IAAG,UAAKA,EAAL,YAAYC,GACfC,MAAO,CAAEC,QAAS,OAAQC,UAAW,IAAKC,OAAQ,IAElD,yBAAKH,MAAO,CAAEI,gBAAiB,OAAQC,SAAU,MAAQP,GACzD,yBAAKE,MAAO,CAAEM,UAAW,aAAcC,SAAU,SAC9CC,OAAOT,QAIhB,6BACCf,EAAKyB,MAAQjB,OAAOkB,KAAK1B,EAAKyB,MAAME,OACnC,oCACE,qCACCnB,OAAOC,QAAQT,EAAKyB,MAAMZ,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YAC7B,yBACED,IAAG,UAAKA,EAAL,YAAYC,GACfC,MAAO,CAAEC,QAAS,OAAQC,UAAW,IAAKC,OAAQ,IAElD,yBAAKH,MAAO,CAAEI,gBAAiB,OAAQC,SAAU,MAAQP,GACzD,yBAAKE,MAAO,CAAEM,UAAW,aAAcC,SAAU,SAC9CC,OAAOT,SAKd,KAEJ,kBAACb,EAAA,EAAM0B,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS9B,GAArC,Y,8CCqBA+B,G,WAmBAC,GAnBV,SAAUD,EAAcE,EAAOC,GAA/B,+EACMC,EAAgBF,EAAM,GAAGG,QACzBC,EAAiB,GAEZC,EAAI,EAJf,YAIkBA,EAAIL,EAAMP,QAJ5B,oBAKUa,EAAON,EAAMK,GACfH,IAAkBI,EAAKH,QAN/B,qBAOUI,EAASC,GAPnB,gBAQQ,OARR,SAQc,CAAER,MAAOI,EAAgBG,YARvC,OAUMH,EAAiB,GACjBF,EAAgBI,EAAKH,QAX3B,QAaII,EAAWN,EAAMI,GACjBD,EAAeK,KAAK,CAACH,EAAKI,OAAOC,EAAGL,EAAKI,OAAOE,IAChDR,EAAeK,KAAK,CAACH,EAAKO,OAAOF,EAAGL,EAAKO,OAAOD,IAfpD,QAIoCP,IAJpC,uDAmBA,SAAUN,EAAcC,EAAOC,GAA/B,2EACWI,EAAI,EADf,YACkBA,EAAIL,EAAMP,QAD5B,oBAEUa,EAAON,EAAMK,IACbE,EAAWN,EAAMI,IACTG,GAJlB,gBAKM,OALN,SAKY,CACJR,MAAO,CACL,CAACM,EAAKI,OAAOC,EAAGL,EAAKI,OAAOE,GAC5B,CAACN,EAAKO,OAAOF,EAAGL,EAAKO,OAAOD,IAE9BL,YAVR,OACoCF,IADpC,uDAgBA,IAAMS,EAAQC,IAAMC,YAAW,SAACC,EAAOC,GACrC,IAAMC,EAAOC,mBAEXnB,EAaEgB,EAbFhB,MAH2C,GAgBzCgB,EAZFI,KAYEJ,EAXFK,kBAL2C,WAgBzCL,EAVFM,iBAN2C,MAM/B,IAN+B,IAgBzCN,EATFO,uBAP2C,MAOzB,GAPyB,IAgBzCP,EARFQ,qBAR2C,MAQ3B,EAR2B,IAgBzCR,EAPFS,aAT2C,MASnC,UATmC,IAgBzCT,EANFU,aAV2C,MAUnC,IAVmC,IAgBzCV,EALFW,cAX2C,MAWlC,IAXkC,IAgBzCX,EAJFY,aAZ2C,MAYnC,IAZmC,IAgBzCZ,EAHFa,sBAb2C,MAa1B,WACfC,QAAQC,IAAI,gCAd6B,EAiBvClE,EAAOmE,mBAAQ,WACnB,OAhHJ,SAAwBC,EAAGX,GAIzB,IAHA,IAAMY,EAAK,CAAEC,MAAO,GAAIpC,MAAO,IAEzBqC,EAAO,GACJhC,EAAI,EAAGA,GAAK6B,EAAEI,OAAS,IAAI7C,OAAQY,IAG1C,IAFA,IAAMgB,EAAOa,EAAEI,MAAMjC,GACfkC,EAAYlB,EAAKA,KAAKmB,MAAM,KACzBC,EAAI,EAAGA,EAAIF,EAAU9C,OAAS,EAAGgD,IAAK,CAC7C,IAAMC,EAAI,UAAMH,EAAUE,GAAhB,YAAsBF,EAAUE,EAAI,IACzCJ,EAAKK,GAGRL,EAAKK,GAAMjC,KAAKY,EAAKsB,MAFrBN,EAAKK,GAAQ,CAACrB,EAAKsB,MAMzB,IAAK,IAAItC,EAAI,EAAGA,EAAI6B,EAAEE,MAAM3C,OAAQY,IAAK,CAAC,IAAD,EACL6B,EAAEE,MAAM/B,GAAlCG,EAD+B,EAC/BA,GAAIoC,EAD2B,EAC3BA,SAAaC,EADc,iCAGjCT,EAAQ,GACdA,EAAM3B,KAAN,eAAgBoC,EAAhB,CAAsBrC,GAAG,GAAD,OAAKA,EAAL,aACxB,IAAK,IAAIH,EAAIkB,EAAWlB,EAAIuC,EAASnD,OAAS8B,EAAWlB,GAAKkB,EAC5Da,EAAM3B,KAAN,eAAgBoC,EAAhB,CAAsBrC,GAAG,GAAD,OAAKA,EAAL,YAAWH,MAErC+B,EAAM3B,KAAN,eAAgBoC,EAAhB,CAAsBrC,GAAG,GAAD,OAAKA,EAAL,WACxB,IAAK,IAAIiC,EAAI,EAAGA,EAAIL,EAAM3C,OAAS,EAAGgD,IAAK,CACzC,IAAM/B,EAAS0B,EAAMK,GAAGjC,GAClBK,EAASuB,EAAMK,EAAI,GAAGjC,GAC5B2B,EAAGnC,MAAMS,KAAT,eACKoC,EADL,CAEEnC,SACAG,SACAL,KACAL,QAASE,EACTZ,OAAQmD,EAASnD,OACjBmD,cAGJT,EAAGC,MAAQD,EAAGC,MAAMU,OAAOV,GAE7B,IAAK,IAAI/B,EAAI,EAAGA,EAAI6B,EAAElC,MAAMP,OAAQY,IAAK,CAAC,IAAD,EACe6B,EAAElC,MAAMK,GAAtD0C,EAD+B,EAC/BA,QAASC,EADsB,EACtBA,QAAStC,EADa,EACbA,OAAQG,EADK,EACLA,OAAWgC,EADN,uDAEjCP,EAAQD,EAAK,GAAD,OAAI3B,GAAJ,OAAaqC,EAAb,YAAwBlC,GAAxB,OAAiCmC,KAAc,GAC3DC,EAAOvC,IAAWG,EAIlBP,EAAI,aACRI,OAAO,GAAD,OAAKA,EAAL,YAA2B,MAAZqC,EAAkB,MAAQ,SAC/ClC,OAAO,GAAD,OAAKA,EAAL,YAA2B,MAAZmC,EAAkB,QAAU,QAC9CH,GAEDI,IAAM3C,EAAK2C,MAAO,GAClBX,EAAM7C,SAAQa,EAAKgC,MAAQA,GAC/BH,EAAGnC,MAAMS,KAAKH,GAEhB,OAAO6B,EAwDEe,CAAejD,EAAOsB,KAC5B,CAACA,EAAWtB,IACTkD,EAASlB,mBAAQ,WACrB,IAAMkB,EAAS,GAIf,OAHElD,EAAMqC,OAAS,IAAIc,SAAQ,SAACC,EAAGhD,GAC/B8C,EAAOE,EAAEV,MAAQW,mBAAoBjD,MAEhC8C,IACN,CAAClD,EAAMqC,QACJtC,EAAQiC,mBAAQ,WAIpB,IAHA,IAAMjC,EAAQlC,EAAKkC,MAAMrB,KAAI,SAAA4E,GAAC,OAAIjF,OAAOkF,OAAOD,MAC1CnB,EAAQtE,EAAKsE,MAAMzD,KAAI,SAAA4E,GAAC,OAAIjF,OAAOkF,OAAOD,MAC5CE,EAAM,EACDpD,EAAI,EAAGA,EAAIvC,EAAKkC,MAAMP,OAAQY,IACrCoD,EAAMC,KAAKD,IAAIA,GAAM3F,EAAKkC,MAAMK,GAAGuC,UAAY,IAAInD,QAAU,GAiB/D,IAdA,IAAMkE,EAAaL,kBACAlB,GAChBwB,MACC,OACAN,YACatD,GACVQ,IAAG,SAAA+C,GAAC,OAAIA,EAAE/C,MACVqD,UAAS,SAAAvD,GACR,OAAOA,EAAKsC,SAAW,EAAI,OAGhCgB,MAAM,SAAUN,kBAAmBQ,UAAU,MAC7CF,MAAM,SAAUN,cAAe3B,EAAQ,EAAGC,EAAS,IAE7CvB,EAAI,EAAGA,EAAIwB,IAASxB,EAC3BsD,EAAWI,OAEb,OAAO/D,IACN,CAAClC,EAAM8D,EAAQC,EAAOF,IAEzBqC,qBAAU,WAKRV,SAAUpC,EAAI+C,SAASC,KACrBZ,SAEGa,OAAO,CACN,CAAC,EAAG,GACJ,CAACxC,EAAOC,KAETwC,YAAY,CAAC,GAAK,IAClBC,GAAG,QAXR,WACEf,SAAUnC,EAAK8C,SAASK,KAAK,YAAahB,QAASiB,iBAYpD,CAAC3C,EAAQV,EAAKS,IAEjB,IAAMW,EAAK,YAAOxC,EAAcE,EAAOlC,EAAKkC,QACtCwE,EAAK,YAAOzE,EAAcC,EAAOlC,EAAKkC,QAEtCrB,EAAM,GAwBZ,OAvBA2D,EAAMc,SAAQ,SAAA/B,GAAS,IAAD,EACgBA,EAAKd,SAAjCG,EADY,EACZA,OAAQG,EADI,EACJA,OAAQV,EADJ,EACIA,QACpBO,EAAO+D,SAAS,UAClB9F,EAAI+B,GAAU,CACZA,OAAQV,EAAMG,GAASU,OACvBA,OAAQb,EAAMG,GAASO,QAEzB/B,EAAIkC,GAAU,CACZA,OAAQb,EAAMG,GAASU,OACvBH,OAAQV,EAAMG,GAASO,UAGzB/B,EAAI+B,GAAU,CACZA,OAAQV,EAAMG,GAASO,OACvBG,OAAQb,EAAMG,GAASU,QAEzBlC,EAAIkC,GAAU,CACZA,OAAQb,EAAMG,GAASO,OACvBA,OAAQV,EAAMG,GAASU,YAKzBS,IAAckD,EAAM,GAAGjE,SAAS+B,MAC3B,8CAGP,yBAAKpB,IAAKA,EAAKwD,QAAS,CAAC,EAAG,EAAG/C,EAAOC,GAAQ+C,YAC5C,uBAAGzD,IAAKC,GACLqD,EAAM7F,KAAI,SAAA0E,GACT,IAAMuB,EAAKvB,EAAErD,MAAM,GAAG,GAChB6E,EAAKxB,EAAErD,MAAM,GAAG,GAChB8E,EAAKzB,EAAErD,MAAM,GAAG,GAChB+E,EAAK1B,EAAErD,MAAM,GAAG,GAEtB,GAAIsB,EAAW,CAAC,IAAD,EACsB3C,EAAI0E,EAAE9C,SAASG,QAAlCsE,EADH,EACLtE,OAAoBuE,EADf,EACOpE,OADP,EAEsBlC,EAAI0E,EAAE9C,SAASM,QAAlCqE,EAFH,EAELxE,OAAoByE,EAFf,EAEOtE,OAIduE,EAAM1B,KAAK2B,KAAK,SAACJ,EAAGrE,EAAIoE,EAAGpE,EAAM,GAAjB,SAAsBqE,EAAGtE,EAAIqE,EAAGrE,EAAM,IACtD2E,EAAM5B,KAAK2B,KAAK,SAACF,EAAGvE,EAAIsE,EAAGtE,EAAM,GAAjB,SAAsBuE,EAAGxE,EAAIuE,EAAGvE,EAAM,IAE5D,OAAO0C,EAAE9C,SAAS+B,MAAM3D,KAAI,SAAC4G,EAAIC,GAC/B,IAAMC,GAAM,GAAa,GAARD,GAAcJ,EACzBM,GAAM,GAAa,GAARF,GAAcF,EACzBK,GAAO,EAAIF,GAAMT,EAAGrE,EAAI8E,EAAKR,EAAGtE,EAChCiF,GAAO,EAAIH,GAAMT,EAAGpE,EAAI6E,EAAKR,EAAGrE,EAChCiF,GAAO,EAAIH,GAAMR,EAAGvE,EAAI+E,EAAKP,EAAGxE,EAChCmF,GAAO,EAAIJ,GAAMR,EAAGtE,EAAI8E,EAAKP,EAAGvE,EAChCmF,EAAQzC,SAGd,OAFAyC,EAAMC,OAAOpB,EAAIC,GACjBkB,EAAME,cAAcN,EAAKC,EAAKC,EAAKC,EAAKhB,EAAIC,GAE1C,0BACEnG,IAAKmH,EAAMpB,WACXpB,EAAGwC,EACHG,YAAazE,EACb0E,OAAQhD,EAAOoC,GACfa,KAAK,OACLvG,QAAS,kBAAMiC,EAAeuB,EAAE9C,gBAKtC,IAeIc,EAfEgF,EAAO/C,SAAUgD,QAAQ,MACzB1B,EAAKvB,EAAErD,MAAM,GAAG,GAChB6E,EAAKxB,EAAErD,MAAM,GAAG,GAClB8E,EAAKzB,EAAErD,MAAM,GAAG,GAChB+E,EAAK1B,EAAErD,MAAM,GAAG,GACduG,EAAKzB,EAAKF,EACV4B,EAAKzB,EAAKF,EACV4B,EAAK/C,KAAK2B,KAAKkB,EAAKA,EAAKC,EAAKA,GAEhCE,EAAMD,EACNE,EAAMF,EACNG,EAAO,EACPC,EAAW,EA6Bf,OAxBIxD,EAAE9C,SAAS0C,MAEb2D,EAAO,GAGPC,EAAW,EAOXH,GAAO,GACPC,GAAO,GAIP7B,GAAU,EACVC,GAAU,EACV1D,EAAI,WAAOuD,EAAP,YAAaC,EAAb,YAAmB6B,EAAnB,YAA0BC,EAA1B,YAAiCC,EAAjC,YAAyCC,EAAzC,YAvBQ,EAuBR,YAA8D/B,EAA9D,YAAoEC,IAExE1D,EAAOgF,EAAKhD,EAAErD,OAId,0BACEpB,IAAKyC,EAAKsD,WACVpB,EAAGlC,EACH6E,YAAazE,EACb0E,OAAO,QACPC,KAAK,OACLvG,QAAS,kBAAMiC,EAAeuB,EAAE9C,gBAMvC+B,EAAM3D,KAAI,SAAC0E,EAAGhD,GACb,IACMgB,EADOiC,SAAUgD,QAAQ,KAClBD,CAAKhD,EAAErD,OACpB,OACE,0BACEpB,IAAKyC,EAAKsD,WACVpB,EAAGlC,EACHyF,MAAOzD,EAAE7C,GACT0F,YAAa1E,EACb2E,OACEzE,EAAMqF,WAAW,QACbrF,EAAMsF,QAAQ,OAAQ,IAAIC,cAC1B3D,MAAOA,EAAG,cAAD,OAAe5B,IAASrB,EAAIiC,EAAM7C,SAASyH,SAE1Dd,KAAK,OACLvG,QAAS,kBAAMiC,EAAeuB,EAAE9C,YAEhC,+BAAQ8C,EAAE7C,a,wBCxTjB,SAAS2G,EAASC,GACvB,IAD6B,EACvBnH,EAAQ,CAAEmC,MAAO,GAAIpC,MAAO,GAAIsC,MAAO,IADhB,cAEV8E,EAAK5E,MAAM,OAFD,IAE7B,2BAAqC,CAAC,IAA3B6D,EAA0B,QACnC,GAAIA,EAAKU,WAAW,KAAM,CAGxB,IAHyB,IAAD,EACYV,EAAK7D,MAAM,MADvB,iBACfG,EADe,KACTC,EADS,KACIC,EADJ,WAElBtD,EAAO,GACJc,EAAI,EAAGA,EAAIwC,EAAKpD,OAAQY,IAAK,CAAC,IAAD,EACVwC,EAAKxC,GAAGmC,MAAM,KADJ,mBAC7BG,EAD6B,KACvB0E,EADuB,KACjBC,EADiB,KAEvB,MAATD,EACF9H,EAAKoD,IAAS2E,EACI,MAATD,IACT9H,EAAKoD,GAAQ2E,GAGjBrH,EAAMmC,MAAM3B,KAAK,CAAED,GAAImC,EAAMC,WAAUrD,cAClC,GAAI8G,EAAKU,WAAW,KAAM,CAG/B,IAHgC,IAAD,EAC8BV,EAAK7D,MAAM,MADzC,iBACtB9B,EADsB,KACdqC,EADc,KACLlC,EADK,KACGmC,EADH,KACYuE,EADZ,KACsB1E,EADtB,WAEzBtD,EAAO,GACJc,EAAI,EAAGA,EAAIwC,EAAKpD,OAAQY,IAAK,CAAC,IAAD,EACVwC,EAAKxC,GAAGmC,MAAM,KADJ,mBAC7BG,EAD6B,KACvB0E,EADuB,KACjBC,EADiB,KAEvB,MAATD,EACF9H,EAAKoD,IAAS2E,EACI,MAATD,IACT9H,EAAKoD,GAAQ2E,GAGjBrH,EAAMD,MAAMS,KAAK,CAAEC,SAAQG,SAAQkC,UAASC,UAASuE,QAAOhI,cACvD,GAAI8G,EAAKU,WAAW,KAAM,CAAC,IAAD,EACCV,EAAK7D,MAAM,MADZ,iBACtBG,EADsB,KAChBtB,EADgB,KACPwB,EADO,WAG/B5C,EAAMqC,MAAM7B,KAAK,CAAEkC,OAAMtB,OAAMwB,WA9BN,8BAiC7B,OAAO5C,E,qBC9BHuH,EAAUzG,IAAMC,YAAW,WAAuCE,GAAS,IAA7CuG,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,WAAYhG,EAAiB,EAAjBA,MAC7D,OACE,6BACE,uCACA,kBAACiG,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CACEhJ,MAAO6C,EACPoG,SAAU,SAAAC,GAAK,OAAIN,EAAcM,EAAMlH,OAAOhC,QAC9CmJ,GAAG,UAEH,4CACA,yCACA,2CACA,4CACA,2CACA,2CAEF,6BACA,kBAACrI,EAAA,EAAD,CAAQE,QAAS,kBAAMoI,IDgBxB,SAAmBC,GACxB,IAAMC,EAAQ,gCAIdD,EAAMA,EAAIE,WAAU,GAGpB,IAFA,IAAMC,EAAQ,UAAMC,OAAOC,SAASC,KAAtB,KACRC,EAASC,SAASC,iBAAiBT,EAAKU,WAAWC,aAAc,MAAM,GACtEJ,EAAOK,YAAY,CAAC,IAAD,gBACLL,EAAOM,YAAYC,YADd,IACxB,2BAAkD,CAAC,IAAxC1E,EAAuC,QAC5CA,EAAKzF,MAAMH,SAAS2J,KACtB/D,EAAKzF,MAAQyF,EAAKzF,MAAMmI,QAAQqB,EAAU,OAHtB,+BAO1BH,EAAIe,eAAed,EAAO,QAZZ,8BAadD,EAAIe,eAAed,EAAO,cAdV,gCAehB,IACMe,GADa,IAAIZ,OAAOa,eACJC,kBAAkBlB,GAC5C,OAAO,IAAImB,KAAK,CAACH,GAAS,CAAE7B,KAAM,kBCnCEiC,CAAUpI,EAAI+C,YAA5C,cACA,kBAAC0D,EAAA,EAAKC,MAAN,CACEE,SAAU,SAAAC,GACRL,EAAWK,EAAMlH,OAAO0I,WAG1B,kBAAC5B,EAAA,EAAK6B,MAAN,CAAYnC,KAAK,WAAWoC,MAAM,qB,wBCzBrC,SAASvL,EAAT,GAA6B,IAAXwL,EAAU,EAAVA,OACvB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAActB,KAAK,SAAnB,uBACA,kBAACmB,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBzJ,GAAG,oBAClB,kBAAC0J,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACC,EAAA,EAAD,CAAatD,MAAM,WAAWtG,GAAG,sBAC/B,kBAAC4J,EAAA,EAAYC,KAAb,CAAkBxK,QAAS,kBAAM6J,EAAO,YAAxC,uBAGA,kBAACU,EAAA,EAAYC,KAAb,CAAkBxK,QAAS,kBAAM6J,EAAO,uBAAxC,qB,YCoEGY,MAvEf,WAAgB,IAAD,EACyBC,qBADzB,mBACNC,EADM,KACOC,EADP,OAEiBF,mBAAS,UAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,qBAHb,mBAGNtK,EAHM,KAGC2K,EAHD,OAIaL,qBAJb,mBAINM,EAJM,KAICC,EAJD,OAKaP,mBAAS,WALtB,mBAKN7I,EALM,KAKCqJ,EALD,OAMmBR,oBAAS,GAN5B,mBAMNS,EANM,KAMIC,EANJ,KAOP/J,EAAME,mBAkBZ,OAjBA4C,qBAAU,WACP,sBAAC,gCAAAkH,EAAA,+EAEuBC,MAAMT,GAF7B,WAEQU,EAFR,QAGcC,GAHd,sBAIU,IAAIC,MAAJ,0BAA6BF,EAAOG,aAJ9C,uBAMqBH,EAAOI,OAN5B,OAMQA,EANR,OAOQjI,EAAI4D,EAASqE,GACnBZ,EAASrH,GACTuH,OAASW,GATX,kDAWE1J,QAAQ8I,MAAR,MACAC,EAAS,KAAEY,SAZb,yDAAD,KAeA,CAAChB,IAEF,6BACE,kBAACxM,EAAD,CACEwL,OAAQ,SAAAnG,GACNoH,EAAWpH,MAGdiH,EACC,kBAAC3M,EAAD,CACEC,KAAM0M,EACNmB,QAAS,SAAA7N,GACP2M,EAAe3M,IAEjBC,OAAQ,WACN0M,OAAegB,MAGjB,KACJ,yBAAKtB,UAAU,iBACb,yBAAK3J,GAAG,UAAU2J,UAAU,WAC1B,kBAAC3C,EAAD,CACEtG,IAAKA,EACLQ,MAAOA,EACP+F,cAAe,SAAAmE,GAAC,OAAIb,EAASa,IAC7BlE,WAAY,SAAAnE,GAAC,OAAI0H,EAAY1H,OAGjC,yBAAK4G,UAAU,QACZU,EAAQ,yBAAK/L,MAAO,CAAE4C,MAAO,QAAUmJ,GAAe,KACtD5K,EACC,kBAACa,EAAD,CACEb,MAAOA,EACPiB,IAAKA,EACLQ,MAAOA,EACPJ,UAAW0J,EACXlJ,eAAgB,SAAAhE,GACd2M,EAAe3M,MAGjB,SC/DM+N,QACW,cAA7BvD,OAAOC,SAASuD,UAEe,UAA7BxD,OAAOC,SAASuD,UAEhBxD,OAAOC,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxD,SAASyD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL9I,QAAQ8I,MAAMA,EAAMa,c","file":"static/js/main.a3514213.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\n\nexport function FeatureDialog({ data, onHide }) {\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Feature details</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <div>Attributes</div>\n        {Object.entries(data)\n          .filter(entry => !['source', 'target', 'linkNum', 'tags'].includes(entry[0]))\n          .map(([key, value]) => (\n            <div\n              key={`${key}_${value}`}\n              style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n            >\n              <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n              <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                {String(value)}\n              </div>\n            </div>\n          ))}\n        <hr />\n        {data.tags && Object.keys(data.tags).length ? (\n          <>\n            <div>Tags</div>\n            {Object.entries(data.tags).map(([key, value]) => (\n              <div\n                key={`${key}_${value}`}\n                style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n              >\n                <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n                <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                  {String(value)}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport * as d3 from 'd3'\n\n// Given a GFA graph with sequence nodes ('S' tags), it breaks the S tags into\n// multiple nodes depending on how long the sequence is, which gives the graph\n// an organic look when the layout algorithm is applied\nfunction reprocessGraph(G, blockSize) {\n  const Gp = { nodes: [], links: [] }\n\n  const seen = {}\n  for (let i = 0; i < (G.paths || {}).length; i++) {\n    const path = G.paths[i]\n    const pathNodes = path.path.split(',')\n    for (let j = 0; j < pathNodes.length - 1; j++) {\n      const curr = `${pathNodes[j]}_${pathNodes[j + 1]}`\n      if (!seen[curr]) {\n        seen[curr] = [path.name]\n      } else {\n        seen[curr].push(path.name)\n      }\n    }\n  }\n  for (let i = 0; i < G.nodes.length; i++) {\n    const { id, sequence, ...rest } = G.nodes[i]\n\n    const nodes = []\n    nodes.push({ ...rest, id: `${id}-start` })\n    for (let i = blockSize; i < sequence.length - blockSize; i += blockSize) {\n      nodes.push({ ...rest, id: `${id}-${i}` })\n    }\n    nodes.push({ ...rest, id: `${id}-end` })\n    for (let j = 0; j < nodes.length - 1; j++) {\n      const source = nodes[j].id\n      const target = nodes[j + 1].id\n      Gp.links.push({\n        ...rest,\n        source,\n        target,\n        id,\n        linkNum: i,\n        length: sequence.length,\n        sequence, // could put actual sequence here if needed\n      })\n    }\n    Gp.nodes = Gp.nodes.concat(nodes)\n  }\n  for (let i = 0; i < G.links.length; i++) {\n    const { strand1, strand2, source, target, ...rest } = G.links[i]\n    const paths = seen[`${source}${strand1}_${target}${strand2}`] || []\n    const loop = source === target\n\n    // enumerates cases for which end of source connects to\n    // which end of the target\n    const link = {\n      source: `${source}-${strand1 === '+' ? 'end' : 'start'}`,\n      target: `${target}-${strand2 === '+' ? 'start' : 'end'}`,\n      ...rest,\n    }\n    if (loop) link.loop = true\n    if (paths.length) link.paths = paths\n    Gp.links.push(link)\n  }\n  return Gp\n}\n\nfunction* generatePaths(links, graph) {\n  let currentLinkId = links[0].linkNum\n  let currentLinkSet = []\n  let original\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    if (currentLinkId !== link.linkNum) {\n      if (original.id) {\n        yield { links: currentLinkSet, original }\n      }\n      currentLinkSet = []\n      currentLinkId = link.linkNum\n    }\n    original = graph[i]\n    currentLinkSet.push([link.source.x, link.source.y])\n    currentLinkSet.push([link.target.x, link.target.y])\n  }\n}\n\nfunction* generateEdges(links, graph) {\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    const original = graph[i]\n    if (!original.id) {\n      yield {\n        links: [\n          [link.source.x, link.source.y],\n          [link.target.x, link.target.y],\n        ],\n        original,\n      }\n    }\n  }\n}\n\nconst Graph = React.forwardRef((props, ref) => {\n  const gref = useRef()\n  const {\n    graph,\n    path = 'Edge',\n    drawPaths = false,\n    blockSize = 1000,\n    contigThickness = 10,\n    edgeThickness = 2,\n    color = 'Rainbow',\n    width = 2000,\n    height = 1000,\n    steps = 500,\n    onFeatureClick = () => {\n      console.log('no feature click configured')\n    },\n  } = props\n  const data = useMemo(() => {\n    return reprocessGraph(graph, blockSize)\n  }, [blockSize, graph])\n  const colors = useMemo(() => {\n    const colors = {}\n    ;(graph.paths || []).forEach((p, i) => {\n      colors[p.name] = d3.schemeCategory10[i]\n    })\n    return colors\n  }, [graph.paths])\n  const links = useMemo(() => {\n    const links = data.links.map(d => Object.create(d))\n    const nodes = data.nodes.map(d => Object.create(d))\n    let max = 0\n    for (let i = 0; i < data.links.length; i++) {\n      max = Math.max(max, (data.links[i].sequence || {}).length || 0)\n    }\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id(d => d.id)\n          .distance(link => {\n            return link.sequence ? 1 : 10\n          }),\n      )\n      .force('charge', d3.forceManyBody().strength(-100))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n    for (let i = 0; i < steps; ++i) {\n      simulation.tick()\n    }\n    return links\n  }, [data, height, steps, width])\n\n  useEffect(() => {\n    // zoom logic, similar to https://observablehq.com/@d3/zoom\n    function zoomed() {\n      d3.select(gref.current).attr('transform', d3.event.transform)\n    }\n    d3.select(ref.current).call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.1, 8])\n        .on('zoom', zoomed),\n    )\n  }, [height, ref, width])\n\n  const paths = [...generatePaths(links, data.links)]\n  const edges = [...generateEdges(links, data.links)]\n\n  const map = {}\n  paths.forEach(path => {\n    const { source, target, linkNum } = path.original\n    if (source.endsWith('start')) {\n      map[source] = {\n        source: links[linkNum].target,\n        target: links[linkNum].source,\n      }\n      map[target] = {\n        target: links[linkNum].target,\n        source: links[linkNum].source,\n      }\n    } else {\n      map[source] = {\n        source: links[linkNum].source,\n        target: links[linkNum].target,\n      }\n      map[target] = {\n        target: links[linkNum].source,\n        source: links[linkNum].target,\n      }\n    }\n  })\n\n  if (drawPaths && !edges[0].original.paths) {\n    return <h1>no paths found</h1>\n  }\n  return (\n    <svg ref={ref} viewBox={[0, 0, width, height].toString()}>\n      <g ref={gref}>\n        {edges.map(p => {\n          const x1 = p.links[0][0]\n          const y1 = p.links[0][1]\n          const x2 = p.links[1][0]\n          const y2 = p.links[1][1]\n\n          if (drawPaths) {\n            const { source: s1, target: t1 } = map[p.original.source]\n            const { source: s2, target: t2 } = map[p.original.target]\n            // implements this algorithm to calculate a control point\n            // that points \"forwards\" of a given contig node\n            // https://math.stackexchange.com/questions/175896/finding-a-point-along-a-line-a-certain-distance-away-from-another-point/175906\n            const dp1 = Math.sqrt((t1.y - s1.y) ** 2 + (t1.x - s1.x) ** 2)\n            const dp2 = Math.sqrt((t2.y - s2.y) ** 2 + (t2.x - s2.x) ** 2)\n\n            return p.original.paths.map((pp, index) => {\n              const d1 = (60 + index * 50) / dp1\n              const d2 = (60 + index * 50) / dp2\n              const cx1 = (1 - d1) * s1.x + d1 * t1.x\n              const cy1 = (1 - d1) * s1.y + d1 * t1.y\n              const cx2 = (1 - d2) * s2.x + d2 * t2.x\n              const cy2 = (1 - d2) * s2.y + d2 * t2.y\n              const cpath = d3.path()\n              cpath.moveTo(x1, y1)\n              cpath.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2) //(cx1, cy1, cx2, cy2, x2, y2, 1)\n              return (\n                <path\n                  key={cpath.toString()}\n                  d={cpath}\n                  strokeWidth={edgeThickness}\n                  stroke={colors[pp]}\n                  fill=\"none\"\n                  onClick={() => onFeatureClick(p.original)}\n                />\n              )\n            })\n          } else {\n            const line = d3.line().context(null)\n            const x1 = p.links[0][0]\n            const y1 = p.links[0][1]\n            let x2 = p.links[1][0]\n            let y2 = p.links[1][1]\n            const dx = x2 - x1\n            const dy = y2 - y1\n            const dr = Math.sqrt(dx * dx + dy * dy)\n            // Defaults for normal edge.\n            let drx = dr\n            let dry = dr\n            let xRot = 0 // degrees\n            let largeArc = 0 // 1 or 0\n            const sweep = 0 // 1 or 0\n\n            let path\n            // Self edge.\n            if (p.original.loop) {\n              // Fiddle with this angle to get loop oriented.\n              xRot = 90\n\n              // Needs to be 1.\n              largeArc = 1\n\n              // Change sweep to change orientation of loop.\n              //sweep = 0;\n\n              // Make drx and dry different to get an ellipse\n              // instead of a circle.\n              drx = -30\n              dry = -20\n\n              // For whatever reason the arc collapses to a point if the beginning\n              // and ending points of the arc are the same, so kludge it.\n              x2 = x2 + 1\n              y2 = y2 + 1\n              path = `M${x1},${y1}A${drx},${dry} ${xRot},${largeArc},${sweep} ${x2},${y2}`\n            } else {\n              path = line(p.links)\n            }\n\n            return (\n              <path\n                key={path.toString()}\n                d={path}\n                strokeWidth={edgeThickness}\n                stroke=\"black\"\n                fill=\"none\"\n                onClick={() => onFeatureClick(p.original)}\n              ></path>\n            )\n          }\n        })}\n\n        {paths.map((p, i) => {\n          const line = d3.line().context(null)\n          const path = line(p.links)\n          return (\n            <path\n              key={path.toString()}\n              d={path}\n              title={p.id}\n              strokeWidth={contigThickness}\n              stroke={\n                color.startsWith('Just')\n                  ? color.replace('Just', '').toLowerCase()\n                  : d3.hsl(d3[`interpolate${color}`](i / paths.length)).darker()\n              }\n              fill=\"none\"\n              onClick={() => onFeatureClick(p.original)}\n            >\n              <title>{p.id}</title>\n            </path>\n          )\n        })}\n      </g>\n    </svg>\n  )\n})\nexport { Graph }\n","// simple handcoded GFA parser\nexport function parseGFA(file) {\n  const graph = { nodes: [], links: [], paths: [] }\n  for (const line of file.split('\\n')) {\n    if (line.startsWith('S')) {\n      const [, name, sequence, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.nodes.push({ id: name, sequence, tags })\n    } else if (line.startsWith('L')) {\n      const [, source, strand1, target, strand2, cigar, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.links.push({ source, target, strand1, strand2, cigar, tags })\n    } else if (line.startsWith('P')) {\n      const [, name, path, ...rest] = line.split('\\t')\n\n      graph.paths.push({ name, path, rest })\n    }\n  }\n  return graph\n}\n\n// adapted from https://observablehq.com/@mbostock/saving-svg\nexport function serialize(svg) {\n  const xmlns = 'http://www.w3.org/2000/xmlns/'\n  const xlinkns = 'http://www.w3.org/1999/xlink'\n  const svgns = 'http://www.w3.org/2000/svg'\n\n  svg = svg.cloneNode(true)\n  const fragment = `${window.location.href}#`\n  const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT, null, false)\n  while (walker.nextNode()) {\n    for (const attr of walker.currentNode.attributes) {\n      if (attr.value.includes(fragment)) {\n        attr.value = attr.value.replace(fragment, '#')\n      }\n    }\n  }\n  svg.setAttributeNS(xmlns, 'xmlns', svgns)\n  svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns)\n  const serializer = new window.XMLSerializer()\n  const string = serializer.serializeToString(svg)\n  return new Blob([string], { type: 'image/svg+xml' })\n}\n","import React from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { serialize } from './util'\nimport saveAs from 'file-saver'\nconst Sidebar = React.forwardRef(({ onColorChange, onPathDraw, color }, ref) => {\n  return (\n    <div>\n      <p>Settings</p>\n      <Form.Group>\n        <Form.Control\n          value={color}\n          onChange={event => onColorChange(event.target.value)}\n          as=\"select\"\n        >\n          <option>JustGrey</option>\n          <option>Turbo</option>\n          <option>Rainbow</option>\n          <option>Spectral</option>\n          <option>Viridis</option>\n          <option>RdYlBu</option>\n        </Form.Control>\n        <br />\n        <Button onClick={() => saveAs(serialize(ref.current))}>Export SVG</Button>\n        <Form.Group\n          onChange={event => {\n            onPathDraw(event.target.checked)\n          }}\n        >\n          <Form.Check type=\"checkbox\" label=\"Draw paths\" />\n        </Form.Group>\n      </Form.Group>\n    </div>\n  )\n})\nexport { Sidebar }\n","import React from 'react'\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap'\n\nexport function Header({ onData }) {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">graphgenome browser</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item onClick={() => onData('MT.gfa')}>\n              MT GFA-spec example\n            </NavDropdown.Item>\n            <NavDropdown.Item onClick={() => onData('toy_pangenome.gfa')}>\n              Paths example\n            </NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { FeatureDialog } from './FeatureDialog'\nimport { Graph } from './Graph'\nimport { Sidebar } from './Sidebar'\nimport { Header } from './Header'\nimport { parseGFA } from './util'\nimport { Form } from 'react-bootstrap'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction App() {\n  const [featureData, setFeatureData] = useState()\n  const [dataset, setDataset] = useState('MT.gfa')\n  const [graph, setGraph] = useState()\n  const [error, setError] = useState()\n  const [color, setColor] = useState('Rainbow')\n  const [pathDraw, setPathDraw] = useState(false)\n  const ref = useRef()\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await fetch(dataset)\n        if (!result.ok) {\n          throw new Error(`Failed to fetch ${result.statusText}`)\n        }\n        const text = await result.text()\n        const d = parseGFA(text)\n        setGraph(d)\n        setError(undefined)\n      } catch (e) {\n        console.error(e)\n        setError(e.message)\n      }\n    })()\n  }, [dataset])\n  return (\n    <div>\n      <Header\n        onData={d => {\n          setDataset(d)\n        }}\n      />\n      {featureData ? (\n        <FeatureDialog\n          data={featureData}\n          onModal={data => {\n            setFeatureData(data)\n          }}\n          onHide={() => {\n            setFeatureData(undefined)\n          }}\n        />\n      ) : null}\n      <div className=\"flexcontainer\">\n        <div id=\"sidebar\" className=\"sidebar\">\n          <Sidebar\n            ref={ref}\n            color={color}\n            onColorChange={c => setColor(c)}\n            onPathDraw={d => setPathDraw(d)}\n          />\n        </div>\n        <div className=\"body\">\n          {error ? <div style={{ color: 'red' }}>{error}</div> : null}\n          {graph ? (\n            <Graph\n              graph={graph}\n              ref={ref}\n              color={color}\n              drawPaths={pathDraw}\n              onFeatureClick={data => {\n                setFeatureData(data)\n              }}\n            />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}