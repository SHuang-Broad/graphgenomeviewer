{"version":3,"sources":["FeatureDialog.js","util.js","Graph.js","Sidebar.js","SettingsDialog.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["FeatureDialog","data","onHide","Modal","show","Header","closeButton","Title","Body","Object","entries","filter","entry","includes","map","key","value","style","display","maxHeight","margin","backgroundColor","minWidth","wordBreak","overflow","String","tags","keys","length","Footer","Button","variant","onClick","makePath","edges","path","i","st","push","source","x","y","last","target","generatePaths","graph","reduce","rv","v","Function","undefined","el","find","r","values","links","original","Graph","React","forwardRef","props","ref","gref","useRef","drawPaths","settings","chunkSize","forceSteps","linkSteps","sequenceThickness","linkThickness","strength","theta","color","width","height","redraw","onFeatureClick","console","log","useMemo","G","Gp","nodes","seen","paths","pathNodes","split","j","curr","name","id","sequence","rest","LN","linkNum","concat","strand1","strand2","loop","link","reprocessGraph","colors","fromEntries","p","d3","d","create","Math","random","simulation","force","distance","iterations","tick","useEffect","current","call","extent","scaleExtent","on","attr","transform","result","generateEdges","nodePositionMap","endsWith","viewBox","toString","x1","y1","x2","y2","s1","t1","s2","t2","m1","m2","m3","abs","pp","index","dx","dy","dr","sqrt","cpath","strokeWidth","stroke","fill","dp1","dp2","d1","d2","cx1","cy1","cx2","cy2","moveTo","bezierCurveTo","line","context","startsWith","replace","toLowerCase","darker","Sidebar","onColorChange","onPathDraw","onRedraw","Form","Label","Control","onChange","event","as","Group","checked","Check","type","label","SettingsDialog","paramSettings","onSettings","useState","setSettings","size","onSubmit","preventDefault","Row","column","sm","Text","muted","Col","val","min","max","AboutDialog","href","OpenURLDialog","onData","setValue","OpenFileDialog","onGraph","a","files","text","onExportSVG","showAbout","setShowAbout","showSettings","setShowSettings","showOpenURL","setShowOpenURL","showOpenFile","setShowOpenFile","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","className","NavDropdown","title","Item","Link","App","featureData","setFeatureData","dataset","setDataset","setData","error","setError","setColor","pathDraw","setPathDraw","setRedraw","fetch","ok","Error","statusText","message","file","cigar","parseGFA","saveAs","svg","xmlns","cloneNode","fragment","window","location","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode","attributes","setAttributeNS","string","XMLSerializer","serializeToString","Blob","serialize","onModal","c","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4d57a877.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\n\nexport function FeatureDialog({ data, onHide }) {\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Feature details</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <div>Attributes</div>\n        {Object.entries(data)\n          .filter(entry => !['source', 'target', 'linkNum', 'tags'].includes(entry[0]))\n          .map(([key, value]) => (\n            <div\n              key={`${key}_${value}`}\n              style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n            >\n              <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n              <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                {String(value)}\n              </div>\n            </div>\n          ))}\n        <hr />\n        {data.tags && Object.keys(data.tags).length ? (\n          <>\n            <div>Tags</div>\n            {Object.entries(data.tags).map(([key, value]) => (\n              <div\n                key={`${key}_${value}`}\n                style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n              >\n                <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n                <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                  {String(value)}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","// simple handcoded GFA parser\nexport function parseGFA(file) {\n  const graph = { nodes: [], links: [], paths: [] }\n  for (const line of file.split('\\n')) {\n    if (line.startsWith('S')) {\n      const [, name, sequence, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.nodes.push({ id: name, sequence, tags })\n    } else if (line.startsWith('L')) {\n      const [, source, strand1, target, strand2, cigar, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.links.push({ source, target, strand1, strand2, cigar, tags })\n    } else if (line.startsWith('P')) {\n      const [, name, path, ...rest] = line.split('\\t')\n\n      graph.paths.push({ name, path, rest })\n    }\n  }\n  return graph\n}\n\n// adapted from https://observablehq.com/@mbostock/saving-svg\nexport function serialize(svg) {\n  const xmlns = 'http://www.w3.org/2000/xmlns/'\n  const xlinkns = 'http://www.w3.org/1999/xlink'\n  const svgns = 'http://www.w3.org/2000/svg'\n\n  svg = svg.cloneNode(true)\n  const fragment = `${window.location.href}#`\n  const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT, null, false)\n  while (walker.nextNode()) {\n    for (const attr of walker.currentNode.attributes) {\n      if (attr.value.includes(fragment)) {\n        attr.value = attr.value.replace(fragment, '#')\n      }\n    }\n  }\n  svg.setAttributeNS(xmlns, 'xmlns', svgns)\n  svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns)\n  const serializer = new window.XMLSerializer()\n  const string = serializer.serializeToString(svg)\n  return new Blob([string], { type: 'image/svg+xml' })\n}\n\n// Given a GFA graph with sequence nodes ('S' tags), it breaks the S tags into\n// multiple nodes depending on how long the sequence is, which gives the graph\n// an organic look when the layout algorithm is applied\nexport function reprocessGraph(G, chunkSize) {\n  const Gp = { nodes: [], links: [] }\n\n  const seen = {}\n  for (let i = 0; i < (G.paths || {}).length; i++) {\n    const path = G.paths[i]\n    const pathNodes = path.path.split(',')\n    for (let j = 0; j < pathNodes.length - 1; j++) {\n      const curr = `${pathNodes[j]}_${pathNodes[j + 1]}`\n      if (!seen[curr]) {\n        seen[curr] = [path.name]\n      } else {\n        seen[curr].push(path.name)\n      }\n    }\n  }\n\n  for (let i = 0; i < G.nodes.length; i++) {\n    const { id, sequence, ...rest } = G.nodes[i]\n    const nodes = []\n    const length = sequence === '*' ? rest.tags.LN : sequence.length\n\n    // break long sequence into multiple nodes, for organic layout\n    nodes.push({ ...rest, id: `${id}-start` })\n    for (let i = chunkSize; i < length - chunkSize; i += chunkSize) {\n      nodes.push({ ...rest, id: `${id}-${i}` })\n    }\n    nodes.push({ ...rest, id: `${id}-end` })\n\n    // recreate links\n    for (let j = 0; j < nodes.length - 1; j++) {\n      const source = nodes[j].id\n      const target = nodes[j + 1].id\n      Gp.links.push({\n        ...rest,\n        source,\n        target,\n        id,\n        length,\n        sequence,\n        linkNum: i,\n      })\n    }\n    Gp.nodes = Gp.nodes.concat(nodes)\n  }\n  for (let i = 0; i < G.links.length; i++) {\n    const { strand1, strand2, source, target, ...rest } = G.links[i]\n    const paths = seen[`${source}${strand1}_${target}${strand2}`] || []\n    const loop = source === target\n\n    // enumerates cases for which end of source connects to\n    // which end of the target\n    const link = {\n      source: `${source}-${strand1 === '+' ? 'end' : 'start'}`,\n      target: `${target}-${strand2 === '+' ? 'start' : 'end'}`,\n      ...rest,\n    }\n    if (loop) {\n      link.loop = true\n    }\n    if (paths.length) {\n      link.paths = paths\n    }\n    Gp.links.push(link)\n  }\n  return Gp\n}\n\n// source https://stackoverflow.com/questions/14446511/most-efficient-method-to-groupby-on-an-array-of-objects\n// returns an array that contains groupings of xs by attribute key\nfunction groupByArray(xs, key) {\n  return xs.reduce(function (rv, x) {\n    const v = key instanceof Function ? key(x) : x[key]\n    if (v !== undefined) {\n      const el = rv.find(r => r && r.key === v)\n      if (el) {\n        el.values.push(x)\n      } else {\n        rv.push({ key: v, values: [x] })\n      }\n    }\n    return rv\n  }, [])\n}\n\n// connects successive start->end to a path\n// param edges: {source:{x,y}, target:{x,y}}[]\nfunction makePath(edges) {\n  const path = []\n  let i = 0\n  for (; i < edges.length; i++) {\n    const st = edges[i]\n    path.push([st.source.x, st.source.y])\n  }\n  const last = edges[i - 1]\n  path.push([last.target.x, last.target.y])\n  return path\n}\n\n// groups the edges data structure by the linkNum attribute\nexport function generatePaths(edges, graph) {\n  const ret = groupByArray(edges, 'linkNum')\n  return ret.map(entry => ({\n    links: makePath(entry.values),\n    original: graph[entry.key],\n  }))\n}\n\nexport function generateEdges(links, graph) {\n  const result = []\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    const original = graph[i]\n    if (!original.id) {\n      result.push({\n        links: [\n          [link.source.x, link.source.y],\n          [link.target.x, link.target.y],\n        ],\n        original,\n      })\n    }\n  }\n  return result\n}\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport * as d3 from 'd3'\nimport { reprocessGraph, generatePaths, generateEdges } from './util'\n\nconst Graph = React.forwardRef((props, ref) => {\n  const gref = useRef()\n  const {\n    graph,\n    drawPaths = false,\n    settings: {\n      chunkSize = 1000,\n      forceSteps = 500,\n      linkSteps = 3,\n      sequenceThickness = 10,\n      linkThickness = 2,\n      strength = -50,\n      theta = 0.9,\n    },\n    color = 'Rainbow',\n    width = 2000,\n    height = 1000,\n    redraw = 0,\n    onFeatureClick = () => {\n      console.log('no feature click configured')\n    },\n  } = props\n\n  const data = useMemo(() => {\n    return reprocessGraph(graph, chunkSize)\n  }, [chunkSize, graph])\n\n  const colors = useMemo(() => {\n    return Object.fromEntries(\n      (graph.paths || []).map((p, i) => {\n        return [p.name, d3.schemeCategory10[i]]\n      }),\n    )\n  }, [graph.paths])\n  const links = useMemo(() => {\n    const links = data.links.map(d =>\n      Object.create({ ...d, x: Math.random(), y: Math.random() }),\n    )\n    const nodes = data.nodes.map(d =>\n      Object.create({ ...d, x: Math.random(), y: Math.random() }),\n    )\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id(d => d.id)\n          .distance(link => {\n            return link.sequence ? 1 : 10\n          })\n          .iterations(linkSteps),\n      )\n      .force('charge', d3.forceManyBody().strength(strength).theta(theta))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n    for (let i = 0; i < forceSteps; ++i) {\n      simulation.tick()\n    }\n    // used for redrawing\n    // eslint-disable-next-line no-unused-vars\n    const m = redraw\n    return links\n  }, [\n    data.links,\n    redraw,\n    data.nodes,\n    forceSteps,\n    height,\n    linkSteps,\n    strength,\n    theta,\n    width,\n  ])\n\n  useEffect(() => {\n    // zoom logic, similar to https://observablehq.com/@d3/zoom\n    function zoomed() {\n      d3.select(gref.current).attr('transform', d3.event.transform)\n    }\n    d3.select(ref.current).call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.1, 8])\n        .on('zoom', zoomed),\n    )\n  }, [height, ref, width])\n\n  const paths = generatePaths(links, graph.nodes)\n  const edges = generateEdges(links, data.links)\n\n  const nodePositionMap = {}\n  for (let i = 0; i < links.length; i++) {\n    const { source, target } = data.links[i]\n    const { linkNum } = links[i]\n    if (linkNum !== undefined) {\n      if (source.endsWith('start')) {\n        nodePositionMap[source] = {\n          source: links[linkNum].target,\n          target: links[linkNum].source,\n        }\n        nodePositionMap[target] = {\n          target: links[linkNum].target,\n          source: links[linkNum].source,\n        }\n      } else {\n        nodePositionMap[source] = {\n          source: links[linkNum].source,\n          target: links[linkNum].target,\n        }\n        nodePositionMap[target] = {\n          target: links[linkNum].source,\n          source: links[linkNum].target,\n        }\n      }\n    }\n  }\n\n  return (\n    <svg width=\"100%\" height=\"100%\" ref={ref} viewBox={[0, 0, width, height].toString()}>\n      <g ref={gref}>\n        {edges.map(p => {\n          const x1 = p.links[0][0]\n          const y1 = p.links[0][1]\n          const x2 = p.links[1][0]\n          const y2 = p.links[1][1]\n\n          if (drawPaths) {\n            if (!p.original.paths) {\n              return null\n            }\n\n            const { source: s1, target: t1 } = nodePositionMap[p.original.source]\n            const { source: s2, target: t2 } = nodePositionMap[p.original.target]\n            const m1 = (y2 - y1) / (x2 - x1)\n            const m2 = (s1.y - t1.y) / (s1.x - t1.x)\n            const m3 = (s2.y - t2.y) / (s2.x - t2.x)\n            if (Math.abs(m1 - m2) < 0.5 || Math.abs(m1 - m3) < 0.5) {\n              return p.original.paths.map((pp, index) => {\n                const dx = x2 - x1\n                const dy = y2 - y1\n                const dr = Math.sqrt(dx * dx + dy * dy) + Math.random() * 40\n                const cpath = `M${x1},${y1}A${dr},${dr} 0 0,${index % 2} ${x2},${y2}`\n                return (\n                  <path\n                    key={`${cpath}-${index}`}\n                    d={cpath}\n                    strokeWidth={linkThickness}\n                    stroke={colors[pp]}\n                    fill=\"none\"\n                    onClick={() => onFeatureClick(p.original)}\n                  >\n                    <title>{pp}</title>\n                  </path>\n                )\n              })\n            }\n\n            // implements this algorithm to calculate a control point\n            // that points \"forwards\" of a given contig node\n            // https://math.stackexchange.com/questions/175896\n            const dp1 = Math.sqrt((t1.y - s1.y) ** 2 + (t1.x - s1.x) ** 2)\n            const dp2 = Math.sqrt((t2.y - s2.y) ** 2 + (t2.x - s2.x) ** 2)\n\n            return p.original.paths.map((pp, index) => {\n              const d1 = (60 + index * 50) / dp1\n              const d2 = (60 + index * 50) / dp2\n              const cx1 = (1 - d1) * s1.x + d1 * t1.x\n              const cy1 = (1 - d1) * s1.y + d1 * t1.y\n              const cx2 = (1 - d2) * s2.x + d2 * t2.x\n              const cy2 = (1 - d2) * s2.y + d2 * t2.y\n              const cpath = d3.path()\n              cpath.moveTo(x1, y1)\n              cpath.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2)\n              return (\n                <path\n                  key={cpath.toString()}\n                  d={cpath}\n                  strokeWidth={linkThickness}\n                  stroke={colors[pp]}\n                  fill=\"none\"\n                  onClick={() => onFeatureClick(p.original)}\n                >\n                  <title>{pp}</title>\n                </path>\n              )\n            })\n          } else {\n            const { source: s1, target: t1 } = nodePositionMap[p.original.source]\n            const { source: s2, target: t2 } = nodePositionMap[p.original.target]\n            const m1 = (y2 - y1) / (x2 - x1)\n            const m2 = (s1.y - t1.y) / (s1.x - t1.x)\n            const m3 = (s2.y - t2.y) / (s2.x - t2.x)\n            const line = d3.line().context(null)\n            const xRot = 90\n            const sweep = 0 // 1 or 0\n            const largeArc = 1\n            const drx = -30\n            const dry = -20\n            const path =\n              p.original.loop && !(m1 - m2 < 0.5 || m1 - m3 < 0.5)\n                ? `M${x1},${y1}A${drx},${dry} ${xRot},${largeArc},${sweep} ${x2},${y2}`\n                : line(p.links)\n\n            return (\n              <path\n                key={path.toString()}\n                d={path}\n                strokeWidth={linkThickness}\n                stroke=\"black\"\n                fill=\"none\"\n                onClick={() => onFeatureClick(p.original)}\n              >\n                <title>{p.original.id}</title>\n              </path>\n            )\n          }\n        })}\n\n        {paths.map((p, i) => {\n          const line = d3.line().context(null)\n          const path = line(p.links)\n          const stroke = color.startsWith('Just')\n            ? color.replace('Just', '').toLowerCase()\n            : d3.hsl(d3[`interpolate${color}`](i / paths.length)).darker()\n          return (\n            <path\n              key={path.toString()}\n              d={path}\n              strokeWidth={sequenceThickness}\n              stroke={stroke}\n              fill=\"none\"\n              onClick={() => onFeatureClick(p.original)}\n            >\n              <title>{p.original.id}</title>\n            </path>\n          )\n        })}\n      </g>\n    </svg>\n  )\n})\nexport { Graph }\n","import React from 'react'\nimport { Form, Button } from 'react-bootstrap'\n\nexport function Sidebar({ onColorChange, onPathDraw, onRedraw, color }) {\n  return (\n    <div>\n      <p>Settings</p>\n      <Form.Label>Color</Form.Label>\n      <Form.Control\n        value={color}\n        onChange={event => onColorChange(event.target.value)}\n        as=\"select\"\n      >\n        <option>JustGrey</option>\n        <option>Turbo</option>\n        <option>Rainbow</option>\n        <option>Spectral</option>\n        <option>Viridis</option>\n        <option>RdYlBu</option>\n      </Form.Control>\n      <br />\n      <Form.Group\n        onChange={event => {\n          onPathDraw(event.target.checked)\n        }}\n      >\n        <Form.Check type=\"checkbox\" label=\"Draw paths\" />\n      </Form.Group>\n      <br />\n      <Button onClick={() => onRedraw()}>Redraw</Button>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\n\nexport function SettingsDialog({ onHide, settings: paramSettings, onSettings }) {\n  const [settings, setSettings] = useState(paramSettings)\n  const {\n    chunkSize,\n    forceSteps,\n    linkSteps,\n    strength,\n    theta,\n    sequenceThickness,\n    linkThickness,\n  } = settings\n  return (\n    <Modal show={true} onHide={onHide} size=\"lg\">\n      <Modal.Header closeButton>\n        <Modal.Title>Settings</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form\n          onSubmit={event => {\n            event.preventDefault()\n            onSettings({\n              ...settings,\n              chunkSize: +chunkSize,\n              forceSteps: +forceSteps,\n              linkSteps: +linkSteps,\n              strength: +strength,\n              theta: +theta,\n              sequenceThickness: +sequenceThickness,\n              linkThickness: +linkThickness,\n            })\n            onHide()\n          }}\n        >\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Number of simulation steps for the nodes\n              <Form.Text muted>Used in the force-based layout simulation</Form.Text>\n            </Form.Label>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                value={forceSteps}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    forceSteps: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Number of simulation steps for the links\n              <Form.Text muted>Used in the force-based layout simulation</Form.Text>\n            </Form.Label>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                value={linkSteps}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    linkSteps: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Sequence chunk size\n              <Form.Text muted>\n                If a contig is of length 5000, then chunk length 1000 would become 5\n                segments. Note that contigs smaller than the chunk length may not be\n                proportionally sized\n              </Form.Text>\n            </Form.Label>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                value={chunkSize}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    chunkSize: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Theta\n              <Form.Text muted>Parameter for the force directed layout</Form.Text>\n            </Form.Label>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                value={theta}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    theta: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Strength\n            </Form.Label>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                value={strength}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    strength: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Sequence thickness\n            </Form.Label>\n            <Col>\n              <input\n                type=\"range\"\n                min={1}\n                max={100}\n                style={{ width: '100%' }}\n                value={sequenceThickness}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    sequenceThickness: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Link thickness\n            </Form.Label>\n            <Col>\n              <input\n                type=\"range\"\n                min={1}\n                max={100}\n                style={{ width: '100%' }}\n                value={linkThickness}\n                onChange={event => {\n                  const val = event.target.value\n                  setSettings(settings => ({\n                    ...settings,\n                    linkThickness: val,\n                  }))\n                }}\n              />\n            </Col>\n          </Form.Group>\n\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { useRef, useState } from 'react'\nimport { Button, Form, Modal, Navbar, Nav, NavDropdown } from 'react-bootstrap'\nimport { SettingsDialog } from './SettingsDialog'\n\nfunction AboutDialog({ onHide }) {\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>graphgenome browser</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <p>\n          This is a small demo of browsing simple graph genomes. The app can read GFA\n          format URLs and local files, all processing is done client side currently.\n        </p>\n        <p>\n          Contact <a href=\"mainto:colin.diesh@gmail.com\">Colin Diesh</a>\n        </p>\n        <p>\n          Thanks to the BCC2020 pangenome team, and{' '}\n          <a href=\"https://github.com/rrwick/Bandage\">Bandage</a> for inspiration.\n        </p>\n        <p>\n          Sample data from GFA-spec repo (MT.gfa), Andrea Guarracino (path example), and\n          gfalint (Shaun Jackman)\n        </p>\n        <a href=\"https://github.com/cmdcolin/graphgenomeviewer\">GitHub</a>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nfunction OpenURLDialog({ onHide, onData }) {\n  const [value, setValue] = useState()\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>graphgenome browser</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form\n          onSubmit={() => {\n            onData(value)\n            onHide()\n          }}\n        >\n          <Form.Group>\n            <Form.Label>Enter URL</Form.Label>\n            <Form.Control\n              type=\"input\"\n              value={value}\n              onChange={event => setValue(event.target.value)}\n            />\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nfunction OpenFileDialog({ onHide, onGraph }) {\n  const ref = useRef()\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Open file</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form\n          onSubmit={async event => {\n            event.preventDefault()\n            const data = await ref.current.files[0].text()\n            onGraph(data)\n            onHide()\n          }}\n        >\n          <Form.Group>\n            <Form.Label>Open file</Form.Label>\n            <Form.Control ref={ref} type=\"file\" />\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport function Header({ onData, settings, onGraph, onExportSVG, onSettings }) {\n  const [showAbout, setShowAbout] = useState()\n  const [showSettings, setShowSettings] = useState()\n  const [showOpenURL, setShowOpenURL] = useState()\n  const [showOpenFile, setShowOpenFile] = useState()\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">graphgenome browser</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"File\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => setShowOpenURL(true)}>\n                Open URL\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => setShowOpenFile(true)}>\n                Open file\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onExportSVG()}>\n                Export SVG\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => onData('MT.gfa')}>\n                MT GFA-spec example\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('toy_pangenome.gfa')}>\n                Paths example\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('example1.gfa')}>\n                Paths example 2\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('big1.gfa')}>Big1</NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('ir1.gfa')}>Ir1</NavDropdown.Item>\n              <NavDropdown.Item\n                onClick={() => onData('test_contig_placement_assembly_graph.gfa')}\n              >\n                Unicycler example\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('circle.gfa')}>\n                Simple circle\n              </NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link\n              onClick={() => {\n                setShowSettings(true)\n              }}\n            >\n              Settings\n            </Nav.Link>\n            <Nav.Link\n              onClick={() => {\n                setShowAbout(true)\n              }}\n            >\n              About\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      {showAbout ? <AboutDialog onHide={() => setShowAbout(false)} /> : null}\n      {showSettings ? (\n        <SettingsDialog\n          settings={settings}\n          onHide={() => setShowSettings(false)}\n          onSettings={onSettings}\n        />\n      ) : null}\n      {showOpenURL ? (\n        <OpenURLDialog onData={onData} onHide={() => setShowOpenURL(false)} />\n      ) : null}\n      {showOpenFile ? (\n        <OpenFileDialog onGraph={onGraph} onHide={() => setShowOpenFile(false)} />\n      ) : null}\n    </>\n  )\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { FeatureDialog } from './FeatureDialog'\nimport { Graph } from './Graph'\nimport { Sidebar } from './Sidebar'\nimport { Header } from './Header'\nimport { parseGFA } from './util'\nimport { serialize } from './util'\nimport saveAs from 'file-saver'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction App() {\n  const [featureData, setFeatureData] = useState()\n  const [dataset, setDataset] = useState('MT.gfa')\n  const [data, setData] = useState()\n  const [error, setError] = useState()\n  const [color, setColor] = useState('Rainbow')\n  const [pathDraw, setPathDraw] = useState(false)\n  const [redraw, setRedraw] = useState(0)\n  const [settings, setSettings] = useState({\n    strength: -50,\n    chunkSize: 1000,\n    forceSteps: 200,\n    linkSteps: 1,\n    sequenceThickness: 10,\n    linkThickness: 2,\n    theta: 0.9,\n  })\n  const ref = useRef()\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await fetch(dataset)\n        if (!result.ok) {\n          throw new Error(`Failed to fetch ${result.statusText}`)\n        }\n        const text = await result.text()\n        setData(text)\n        setError(undefined)\n      } catch (e) {\n        console.error(e)\n        setError(e.message)\n      }\n    })()\n  }, [dataset])\n\n  const graph = useMemo(() => {\n    return data ? parseGFA(data) : undefined\n  }, [data])\n\n  return (\n    <div>\n      <Header\n        onData={d => {\n          setDataset(d)\n        }}\n        onGraph={d => {\n          setData(d)\n        }}\n        onSettings={d => {\n          setSettings(d)\n        }}\n        onExportSVG={() => {\n          saveAs(serialize(ref.current))\n        }}\n        settings={settings}\n      />\n      {featureData ? (\n        <FeatureDialog\n          data={featureData}\n          onModal={data => {\n            setFeatureData(data)\n          }}\n          onHide={() => {\n            setFeatureData(undefined)\n          }}\n        />\n      ) : null}\n      <div className=\"flexcontainer\">\n        <div id=\"sidebar\" className=\"sidebar\">\n          <Sidebar\n            color={color}\n            onColorChange={c => setColor(c)}\n            onPathDraw={d => setPathDraw(d)}\n            onRedraw={() => setRedraw(redraw => redraw + 1)}\n          />\n        </div>\n        <div className=\"body\">\n          {error ? <div style={{ color: 'red' }}>{error}</div> : null}\n          {graph ? (\n            <Graph\n              graph={graph}\n              ref={ref}\n              color={color}\n              redraw={redraw}\n              drawPaths={pathDraw}\n              onFeatureClick={data => {\n                setFeatureData(data)\n              }}\n              settings={settings}\n            />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}