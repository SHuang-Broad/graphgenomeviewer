{"version":3,"sources":["FeatureDialog.js","Graph.js","Sidebar.js","util.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["FeatureDialog","data","onHide","Modal","show","Header","closeButton","Title","Body","Object","entries","filter","entry","includes","map","key","value","style","display","maxHeight","margin","backgroundColor","minWidth","wordBreak","overflow","String","tags","keys","length","Footer","Button","variant","onClick","generatePaths","generateEdges","links","graph","currentLinkId","linkNum","currentLinkSet","i","link","original","id","push","source","x","y","target","Graph","React","forwardRef","props","ref","gref","useRef","drawPaths","settings","color","width","height","onFeatureClick","console","log","chunkSize","numSteps","contigThickness","edgeThickness","strength","useMemo","G","Gp","nodes","seen","paths","path","pathNodes","split","j","curr","name","sequence","rest","LN","concat","strand1","strand2","loop","reprocessGraph","colors","forEach","p","d3","d","create","max","Math","simulation","force","distance","tick","useEffect","current","call","extent","scaleExtent","on","attr","transform","edges","endsWith","viewBox","toString","x1","y1","x2","y2","s1","t1","s2","t2","dp1","sqrt","dp2","pp","index","d1","d2","cx1","cy1","cx2","cy2","cpath","moveTo","bezierCurveTo","strokeWidth","stroke","fill","line","context","dx","dy","dr","drx","dry","xRot","largeArc","title","startsWith","replace","toLowerCase","darker","Sidebar","onColorChange","onPathDraw","Form","Group","Label","Control","onChange","event","as","saveAs","svg","xmlns","cloneNode","fragment","window","location","href","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode","attributes","setAttributeNS","string","XMLSerializer","serializeToString","Blob","type","serialize","checked","Check","label","SettingsDialog","onSettings","useState","setNumSteps","setChunkSize","setStrength","size","onSubmit","preventDefault","Row","column","sm","Col","AboutDialog","OpenURLDialog","onData","setValue","OpenFileDialog","onGraph","a","files","text","showAbout","setShowAbout","showSettings","setShowSettings","showOpenURL","setShowOpenURL","showOpenFile","setShowOpenFile","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","className","NavDropdown","Item","Link","App","featureData","setFeatureData","dataset","setDataset","setData","error","setError","setColor","pathDraw","setPathDraw","setSettings","fetch","result","ok","Error","statusText","undefined","message","file","val","cigar","parseGFA","onModal","c","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4bc30637.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\n\nexport function FeatureDialog({ data, onHide }) {\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Feature details</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <div>Attributes</div>\n        {Object.entries(data)\n          .filter(entry => !['source', 'target', 'linkNum', 'tags'].includes(entry[0]))\n          .map(([key, value]) => (\n            <div\n              key={`${key}_${value}`}\n              style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n            >\n              <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n              <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                {String(value)}\n              </div>\n            </div>\n          ))}\n        <hr />\n        {data.tags && Object.keys(data.tags).length ? (\n          <>\n            <div>Tags</div>\n            {Object.entries(data.tags).map(([key, value]) => (\n              <div\n                key={`${key}_${value}`}\n                style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n              >\n                <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n                <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                  {String(value)}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport * as d3 from 'd3'\n\n// Given a GFA graph with sequence nodes ('S' tags), it breaks the S tags into\n// multiple nodes depending on how long the sequence is, which gives the graph\n// an organic look when the layout algorithm is applied\nfunction reprocessGraph(G, chunkSize) {\n  const Gp = { nodes: [], links: [] }\n\n  const seen = {}\n  for (let i = 0; i < (G.paths || {}).length; i++) {\n    const path = G.paths[i]\n    const pathNodes = path.path.split(',')\n    for (let j = 0; j < pathNodes.length - 1; j++) {\n      const curr = `${pathNodes[j]}_${pathNodes[j + 1]}`\n      if (!seen[curr]) {\n        seen[curr] = [path.name]\n      } else {\n        seen[curr].push(path.name)\n      }\n    }\n  }\n  for (let i = 0; i < G.nodes.length; i++) {\n    const { id, sequence, ...rest } = G.nodes[i]\n    const nodes = []\n    const length = sequence === '*' ? rest.tags.LN : sequence.length\n\n    // break long sequence into multiple nodes, for organic layout\n    nodes.push({ ...rest, id: `${id}-start` })\n    for (let i = chunkSize; i < length - chunkSize; i += chunkSize) {\n      nodes.push({ ...rest, id: `${id}-${i}` })\n    }\n    nodes.push({ ...rest, id: `${id}-end` })\n\n    // recreate links\n    for (let j = 0; j < nodes.length - 1; j++) {\n      const source = nodes[j].id\n      const target = nodes[j + 1].id\n      Gp.links.push({\n        ...rest,\n        source,\n        target,\n        id,\n        length,\n        sequence,\n        linkNum: i,\n      })\n    }\n    Gp.nodes = Gp.nodes.concat(nodes)\n  }\n  for (let i = 0; i < G.links.length; i++) {\n    const { strand1, strand2, source, target, ...rest } = G.links[i]\n    const paths = seen[`${source}${strand1}_${target}${strand2}`] || []\n    const loop = source === target\n\n    // enumerates cases for which end of source connects to\n    // which end of the target\n    const link = {\n      source: `${source}-${strand1 === '+' ? 'end' : 'start'}`,\n      target: `${target}-${strand2 === '+' ? 'start' : 'end'}`,\n      ...rest,\n    }\n    if (loop) {\n      link.loop = true\n    }\n    if (paths.length) {\n      link.paths = paths\n    }\n    Gp.links.push(link)\n  }\n  return Gp\n}\n\nfunction* generatePaths(links, graph) {\n  let currentLinkId = links[0].linkNum\n  let currentLinkSet = []\n  let original\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    if (currentLinkId !== link.linkNum) {\n      if (original.id) {\n        yield { links: currentLinkSet, original }\n      }\n      currentLinkSet = []\n      currentLinkId = link.linkNum\n    }\n    original = graph[i]\n    currentLinkSet.push([link.source.x, link.source.y])\n    currentLinkSet.push([link.target.x, link.target.y])\n  }\n}\n\nfunction* generateEdges(links, graph) {\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    const original = graph[i]\n    if (!original.id) {\n      yield {\n        links: [\n          [link.source.x, link.source.y],\n          [link.target.x, link.target.y],\n        ],\n        original,\n      }\n    }\n  }\n}\n\nconst Graph = React.forwardRef((props, ref) => {\n  const gref = useRef()\n  const {\n    graph,\n    drawPaths = false,\n    settings,\n    color = 'Rainbow',\n    width = 2000,\n    height = 1000,\n    onFeatureClick = () => {\n      console.log('no feature click configured')\n    },\n  } = props\n  const {\n    chunkSize = 1000,\n    numSteps = 500,\n    contigThickness = 10,\n    edgeThickness = 2,\n    strength = -50,\n  } = settings\n  console.log(chunkSize, numSteps, strength)\n  const data = useMemo(() => {\n    return reprocessGraph(graph, chunkSize)\n  }, [chunkSize, graph])\n  const colors = useMemo(() => {\n    const colors = {}\n    ;(graph.paths || []).forEach((p, i) => {\n      colors[p.name] = d3.schemeCategory10[i]\n    })\n    return colors\n  }, [graph.paths])\n  const links = useMemo(() => {\n    const links = data.links.map(d => Object.create(d))\n    const nodes = data.nodes.map(d => Object.create(d))\n    let max = 0\n    for (let i = 0; i < data.links.length; i++) {\n      max = Math.max(max, (data.links[i].sequence || {}).length || 0)\n    }\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id(d => d.id)\n          .distance(link => {\n            return link.sequence ? 1 : 10\n          }),\n      )\n      .force('charge', d3.forceManyBody().strength(strength))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n    for (let i = 0; i < numSteps; ++i) {\n      simulation.tick()\n    }\n    return links\n  }, [data.links, data.nodes, height, numSteps, strength, width])\n\n  useEffect(() => {\n    // zoom logic, similar to https://observablehq.com/@d3/zoom\n    function zoomed() {\n      d3.select(gref.current).attr('transform', d3.event.transform)\n    }\n    d3.select(ref.current).call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.1, 8])\n        .on('zoom', zoomed),\n    )\n  }, [height, ref, width])\n\n  const paths = [...generatePaths(links, data.links)]\n  const edges = [...generateEdges(links, data.links)]\n\n  const map = {}\n  paths.forEach(path => {\n    const { source, target, linkNum } = path.original\n    if (source.endsWith('start')) {\n      map[source] = {\n        source: links[linkNum].target,\n        target: links[linkNum].source,\n      }\n      map[target] = {\n        target: links[linkNum].target,\n        source: links[linkNum].source,\n      }\n    } else {\n      map[source] = {\n        source: links[linkNum].source,\n        target: links[linkNum].target,\n      }\n      map[target] = {\n        target: links[linkNum].source,\n        source: links[linkNum].target,\n      }\n    }\n  })\n\n  if (drawPaths && !edges[0].original.paths) {\n    return <h1>no paths found</h1>\n  }\n  return (\n    <svg width=\"100%\" height=\"100%\" ref={ref} viewBox={[0, 0, width, height].toString()}>\n      <g ref={gref}>\n        {edges.map(p => {\n          const x1 = p.links[0][0]\n          const y1 = p.links[0][1]\n          const x2 = p.links[1][0]\n          const y2 = p.links[1][1]\n\n          if (drawPaths) {\n            const { source: s1, target: t1 } = map[p.original.source]\n            const { source: s2, target: t2 } = map[p.original.target]\n            // implements this algorithm to calculate a control point\n            // that points \"forwards\" of a given contig node\n            // https://math.stackexchange.com/questions/175896/finding-a-point-along-a-line-a-certain-distance-away-from-another-point/175906\n            const dp1 = Math.sqrt((t1.y - s1.y) ** 2 + (t1.x - s1.x) ** 2)\n            const dp2 = Math.sqrt((t2.y - s2.y) ** 2 + (t2.x - s2.x) ** 2)\n\n            return p.original.paths.map((pp, index) => {\n              const d1 = (60 + index * 50) / dp1\n              const d2 = (60 + index * 50) / dp2\n              const cx1 = (1 - d1) * s1.x + d1 * t1.x\n              const cy1 = (1 - d1) * s1.y + d1 * t1.y\n              const cx2 = (1 - d2) * s2.x + d2 * t2.x\n              const cy2 = (1 - d2) * s2.y + d2 * t2.y\n              const cpath = d3.path()\n              cpath.moveTo(x1, y1)\n              cpath.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2) //(cx1, cy1, cx2, cy2, x2, y2, 1)\n              return (\n                <path\n                  key={cpath.toString()}\n                  d={cpath}\n                  strokeWidth={edgeThickness}\n                  stroke={colors[pp]}\n                  fill=\"none\"\n                  onClick={() => onFeatureClick(p.original)}\n                />\n              )\n            })\n          } else {\n            const line = d3.line().context(null)\n            const x1 = p.links[0][0]\n            const y1 = p.links[0][1]\n            let x2 = p.links[1][0]\n            let y2 = p.links[1][1]\n            const dx = x2 - x1\n            const dy = y2 - y1\n            const dr = Math.sqrt(dx * dx + dy * dy)\n            // Defaults for normal edge.\n            let drx = dr\n            let dry = dr\n            let xRot = 0 // degrees\n            let largeArc = 0 // 1 or 0\n            const sweep = 0 // 1 or 0\n\n            let path\n            // Self edge.\n            if (p.original.loop) {\n              // Fiddle with this angle to get loop oriented.\n              xRot = 90\n\n              // Needs to be 1.\n              largeArc = 1\n\n              // Change sweep to change orientation of loop.\n              //sweep = 0;\n\n              // Make drx and dry different to get an ellipse\n              // instead of a circle.\n              drx = -30\n              dry = -20\n\n              // For whatever reason the arc collapses to a point if the beginning\n              // and ending points of the arc are the same, so kludge it.\n              x2 = x2 + 1\n              y2 = y2 + 1\n              path = `M${x1},${y1}A${drx},${dry} ${xRot},${largeArc},${sweep} ${x2},${y2}`\n            } else {\n              path = line(p.links)\n            }\n\n            return (\n              <path\n                key={path.toString()}\n                d={path}\n                strokeWidth={edgeThickness}\n                stroke=\"black\"\n                fill=\"none\"\n                onClick={() => onFeatureClick(p.original)}\n              ></path>\n            )\n          }\n        })}\n\n        {paths.map((p, i) => {\n          const line = d3.line().context(null)\n          const path = line(p.links)\n          return (\n            <path\n              key={path.toString()}\n              d={path}\n              title={p.id}\n              strokeWidth={contigThickness}\n              stroke={\n                color.startsWith('Just')\n                  ? color.replace('Just', '').toLowerCase()\n                  : d3.hsl(d3[`interpolate${color}`](i / paths.length)).darker()\n              }\n              fill=\"none\"\n              onClick={() => onFeatureClick(p.original)}\n            >\n              <title>{p.id}</title>\n            </path>\n          )\n        })}\n      </g>\n    </svg>\n  )\n})\nexport { Graph }\n","import React from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { serialize } from './util'\nimport saveAs from 'file-saver'\nconst Sidebar = React.forwardRef(({ onColorChange, onPathDraw, color }, ref) => {\n  return (\n    <div>\n      <p>Settings</p>\n      <Form.Group>\n        <Form.Label>Color</Form.Label>\n        <Form.Control\n          value={color}\n          onChange={event => onColorChange(event.target.value)}\n          as=\"select\"\n        >\n          <option>JustGrey</option>\n          <option>Turbo</option>\n          <option>Rainbow</option>\n          <option>Spectral</option>\n          <option>Viridis</option>\n          <option>RdYlBu</option>\n        </Form.Control>\n        <br />\n        <Button onClick={() => saveAs(serialize(ref.current))}>Export SVG</Button>\n        <Form.Group\n          onChange={event => {\n            onPathDraw(event.target.checked)\n          }}\n        >\n          <Form.Check type=\"checkbox\" label=\"Draw paths\" />\n        </Form.Group>\n      </Form.Group>\n    </div>\n  )\n})\nexport { Sidebar }\n","// simple handcoded GFA parser\nexport function parseGFA(file) {\n  const graph = { nodes: [], links: [], paths: [] }\n  for (const line of file.split('\\n')) {\n    if (line.startsWith('S')) {\n      const [, name, sequence, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.nodes.push({ id: name, sequence, tags })\n    } else if (line.startsWith('L')) {\n      const [, source, strand1, target, strand2, cigar, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.links.push({ source, target, strand1, strand2, cigar, tags })\n    } else if (line.startsWith('P')) {\n      const [, name, path, ...rest] = line.split('\\t')\n\n      graph.paths.push({ name, path, rest })\n    }\n  }\n  return graph\n}\n\n// adapted from https://observablehq.com/@mbostock/saving-svg\nexport function serialize(svg) {\n  const xmlns = 'http://www.w3.org/2000/xmlns/'\n  const xlinkns = 'http://www.w3.org/1999/xlink'\n  const svgns = 'http://www.w3.org/2000/svg'\n\n  svg = svg.cloneNode(true)\n  const fragment = `${window.location.href}#`\n  const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT, null, false)\n  while (walker.nextNode()) {\n    for (const attr of walker.currentNode.attributes) {\n      if (attr.value.includes(fragment)) {\n        attr.value = attr.value.replace(fragment, '#')\n      }\n    }\n  }\n  svg.setAttributeNS(xmlns, 'xmlns', svgns)\n  svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns)\n  const serializer = new window.XMLSerializer()\n  const string = serializer.serializeToString(svg)\n  return new Blob([string], { type: 'image/svg+xml' })\n}\n","import React, { useRef, useState } from 'react'\nimport { Button, Col, Form, Modal, Navbar, Nav, NavDropdown, Row } from 'react-bootstrap'\n\nfunction SettingsDialog({ onHide, settings, onSettings }) {\n  const [numSteps, setNumSteps] = useState(settings.numSteps)\n  const [chunkSize, setChunkSize] = useState(settings.chunkSize)\n  const [strength, setStrength] = useState(settings.strength)\n  return (\n    <Modal show={true} onHide={onHide} size=\"lg\">\n      <Modal.Header closeButton>\n        <Modal.Title>Settings</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form\n          onSubmit={event => {\n            event.preventDefault()\n            onSettings({ ...settings, chunkSize, numSteps, strength })\n            onHide()\n          }}\n        >\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Number of simulation steps\n            </Form.Label>\n            <Col>\n              <Form.Control\n                column\n                type=\"input\"\n                value={numSteps}\n                onChange={event => setNumSteps(+event.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Sequence chunk size\n            </Form.Label>\n            <Col>\n              <Form.Control\n                column\n                type=\"input\"\n                value={chunkSize}\n                onChange={event => setChunkSize(+event.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"4\">\n              Force directed layout strength\n            </Form.Label>\n            <Col>\n              <Form.Control\n                column\n                type=\"input\"\n                value={strength}\n                onChange={event => setStrength(+event.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nfunction AboutDialog({ onHide }) {\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>graphgenome browser</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <p>\n          This is a small demo of browsing a simple graph genomes. The samples are\n          provided via GFA format\n        </p>\n        <p>\n          Contact <a href=\"mainto:colin.diesh@gmail.com\">Colin Diesh</a>\n        </p>\n        <p>\n          Thanks to the BCC2020 pangenome team, and{' '}\n          <a href=\"https://github.com/rrwick/Bandage\">Bandage</a> for inspiration.\n        </p>\n        <p>\n          Sample data from GFA-spec repo (MT.gfa), Andrea Guarracino (path example), and\n          gfalint (Shaun Jackman)\n        </p>\n        <a href=\"https://github.com/cmdcolin/graphgenomeviewer\">GitHub</a>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nfunction OpenURLDialog({ onHide, onData }) {\n  const [value, setValue] = useState()\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>graphgenome browser</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form\n          onSubmit={() => {\n            onData(value)\n            onHide()\n          }}\n        >\n          <Form.Group>\n            <Form.Label>Enter URL</Form.Label>\n            <Form.Control\n              type=\"input\"\n              value={value}\n              onChange={event => setValue(event.target.value)}\n            />\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nfunction OpenFileDialog({ onHide, onGraph }) {\n  const ref = useRef()\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Open file</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <Form\n          onSubmit={async event => {\n            event.preventDefault()\n            const data = await ref.current.files[0].text()\n            onGraph(data)\n            onHide()\n          }}\n        >\n          <Form.Group>\n            <Form.Label>Open file</Form.Label>\n            <Form.Control ref={ref} type=\"file\" />\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport function Header({ onData, settings, onGraph, onSettings }) {\n  const [showAbout, setShowAbout] = useState()\n  const [showSettings, setShowSettings] = useState()\n  const [showOpenURL, setShowOpenURL] = useState()\n  const [showOpenFile, setShowOpenFile] = useState()\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">graphgenome browser</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"File\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => setShowOpenURL(true)}>\n                Open URL\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => setShowOpenFile(true)}>\n                Open file\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => onData('MT.gfa')}>\n                MT GFA-spec example\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('toy_pangenome.gfa')}>\n                Paths example\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('big1.gfa')}>Big1</NavDropdown.Item>\n              <NavDropdown.Item onClick={() => onData('ir1.gfa')}>Ir1</NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link\n              onClick={() => {\n                setShowSettings(true)\n              }}\n            >\n              Settings\n            </Nav.Link>\n            <Nav.Link\n              onClick={() => {\n                setShowAbout(true)\n              }}\n            >\n              About\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      {showAbout ? <AboutDialog onHide={() => setShowAbout(false)} /> : null}\n      {showSettings ? (\n        <SettingsDialog\n          settings={settings}\n          onHide={() => setShowSettings(false)}\n          onSettings={onSettings}\n        />\n      ) : null}\n      {showOpenURL ? (\n        <OpenURLDialog onData={onData} onHide={() => setShowOpenURL(false)} />\n      ) : null}\n      {showOpenFile ? (\n        <OpenFileDialog onGraph={onGraph} onHide={() => setShowOpenFile(false)} />\n      ) : null}\n    </>\n  )\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { FeatureDialog } from './FeatureDialog'\nimport { Graph } from './Graph'\nimport { Sidebar } from './Sidebar'\nimport { Header } from './Header'\nimport { parseGFA } from './util'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction App() {\n  const [featureData, setFeatureData] = useState()\n  const [dataset, setDataset] = useState('MT.gfa')\n  const [data, setData] = useState()\n  const [error, setError] = useState()\n  const [color, setColor] = useState('Rainbow')\n  const [pathDraw, setPathDraw] = useState(false)\n  const [settings, setSettings] = useState({\n    strength: -50,\n    chunkSize: 1000,\n    numSteps: 1000,\n  })\n  const ref = useRef()\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await fetch(dataset)\n        if (!result.ok) {\n          throw new Error(`Failed to fetch ${result.statusText}`)\n        }\n        const text = await result.text()\n        setData(text)\n        setError(undefined)\n      } catch (e) {\n        console.error(e)\n        setError(e.message)\n      }\n    })()\n  }, [dataset])\n\n  const graph = useMemo(() => {\n    return data ? parseGFA(data) : undefined\n  }, [data])\n\n  return (\n    <div>\n      <Header\n        onData={d => {\n          setDataset(d)\n        }}\n        onGraph={d => {\n          setData(d)\n        }}\n        onSettings={d => {\n          setSettings(d)\n        }}\n        settings={settings}\n      />\n      {featureData ? (\n        <FeatureDialog\n          data={featureData}\n          onModal={data => {\n            setFeatureData(data)\n          }}\n          onHide={() => {\n            setFeatureData(undefined)\n          }}\n        />\n      ) : null}\n      <div className=\"flexcontainer\">\n        <div id=\"sidebar\" className=\"sidebar\">\n          <Sidebar\n            ref={ref}\n            color={color}\n            onColorChange={c => setColor(c)}\n            onPathDraw={d => setPathDraw(d)}\n          />\n        </div>\n        <div className=\"body\">\n          {error ? <div style={{ color: 'red' }}>{error}</div> : null}\n          {graph ? (\n            <Graph\n              graph={graph}\n              ref={ref}\n              color={color}\n              drawPaths={pathDraw}\n              onFeatureClick={data => {\n                setFeatureData(data)\n              }}\n              settings={settings}\n            />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}