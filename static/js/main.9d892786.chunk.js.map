{"version":3,"sources":["OpenDialog.js","FeatureDialog.js","Graph.js","GraphContainer.js","util.js","App.js","serviceWorker.js","index.js"],"names":["OpenDialog","show","onHide","onResult","Modal","Header","closeButton","Title","Body","Footer","Button","variant","onClick","FeatureDialog","data","Object","entries","filter","entry","includes","map","key","value","style","display","maxHeight","margin","backgroundColor","minWidth","wordBreak","overflow","String","tags","keys","length","generatePaths","generateEdges","links","graph","currentLinkId","linkNum","currentLinkSet","i","link","original","id","push","source","x","y","target","Graph","React","forwardRef","props","ref","path","blockSize","contigThickness","edgeThickness","color","width","height","steps","onFeatureClick","console","log","useMemo","G","Gp","nodes","seen","paths","pathNodes","split","j","curr","name","sequence","rest","concat","strand1","strand2","loop","reprocessGraph","d","create","max","Math","simulation","d3","force","distance","strength","tick","useEffect","call","extent","scaleExtent","on","attr","transform","edges","colors","reduce","a","b","score","forEach","p","random","endsWith","viewBox","toString","className","line","context","x1","y1","x2","y2","dx","dy","dr","sqrt","drx","dry","xRot","largeArc","s1","t1","s2","t2","dp1","dp2","pp","d1","d2","cx1","cy1","cx2","cy2","cpath","moveTo","bezierCurveTo","strokeWidth","stroke","fill","title","startsWith","replace","toLowerCase","darker","GraphContainer","useState","setColor","setPath","useRef","Form","Group","Control","onChange","event","as","saveAs","svg","xmlns","cloneNode","fragment","window","location","href","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode","attributes","setAttributeNS","string","XMLSerializer","serializeToString","Blob","type","serialize","current","onOpen","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","Link","App","setShow","featureData","setFeatureData","callback","useCallback","onModal","undefined","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d892786.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\n\nexport function OpenDialog({ show, onHide, onResult }) {\n  return (\n    <Modal show={show} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Modal title</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        Contents\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\n\nexport function FeatureDialog({ data, onHide }) {\n  return (\n    <Modal show={true} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Feature details</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <div>Attributes</div>\n        {Object.entries(data)\n          .filter(entry => !['source', 'target', 'linkNum', 'tags'].includes(entry[0]))\n          .map(([key, value]) => (\n            <div\n              key={`${key}_${value}`}\n              style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n            >\n              <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n              <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                {String(value)}\n              </div>\n            </div>\n          ))}\n        <hr />\n        {data.tags && Object.keys(data.tags).length ? (\n          <>\n            <div>Tags</div>\n            {Object.entries(data.tags).map(([key, value]) => (\n              <div\n                key={`${key}_${value}`}\n                style={{ display: 'flex', maxHeight: 150, margin: 3 }}\n              >\n                <div style={{ backgroundColor: '#dda', minWidth: 100 }}>{key}</div>\n                <div style={{ wordBreak: 'break-word', overflow: 'auto' }}>\n                  {String(value)}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { useMemo, useEffect } from 'react'\nimport * as d3 from 'd3'\n\n// Given a GFA graph with sequence nodes ('S' tags), it breaks the S tags into\n// multiple nodes depending on how long the sequence is, which gives the graph\n// an organic look when the layout algorithm is applied\nfunction reprocessGraph(G, blockSize) {\n  const Gp = { nodes: [], links: [] }\n\n  const seen = {}\n  for (let i = 0; i < (G.paths || {}).length; i++) {\n    const path = G.paths[i]\n    const pathNodes = path.path.split(',')\n    for (let j = 0; j < pathNodes.length - 1; j++) {\n      const curr = `${pathNodes[j]}_${pathNodes[j + 1]}`\n      if (!seen[curr]) {\n        seen[curr] = [path.name]\n      } else {\n        seen[curr].push(path.name)\n      }\n    }\n  }\n  for (let i = 0; i < G.nodes.length; i++) {\n    const { id, sequence, ...rest } = G.nodes[i]\n\n    const nodes = []\n    nodes.push({ ...rest, id: `${id}-start` })\n    for (let i = blockSize; i < sequence.length - blockSize; i += blockSize) {\n      nodes.push({ ...rest, id: `${id}-${i}` })\n    }\n    nodes.push({ ...rest, id: `${id}-end` })\n    for (let j = 0; j < nodes.length - 1; j++) {\n      const source = nodes[j].id\n      const target = nodes[j + 1].id\n      Gp.links.push({\n        ...rest,\n        source,\n        target,\n        id,\n        linkNum: i,\n        length: sequence.length,\n        sequence, // could put actual sequence here if needed\n      })\n    }\n    Gp.nodes = Gp.nodes.concat(nodes)\n  }\n  for (let i = 0; i < G.links.length; i++) {\n    const { strand1, strand2, source, target, ...rest } = G.links[i]\n    const paths = seen[`${source}${strand1}_${target}${strand2}`] || []\n    const loop = source === target\n\n    // enumerates cases for which end of source connects to\n    // which end of the target\n    if (strand1 === '+' && strand2 === '+') {\n      Gp.links.push({\n        source: `${source}-end`,\n        target: `${target}-start`,\n        loop,\n        paths,\n        ...rest,\n      })\n    } else if (strand1 === '-' && strand2 === '+') {\n      Gp.links.push({\n        source: `${source}-start`,\n        target: `${target}-start`,\n        loop,\n        paths,\n        ...rest,\n      })\n    } else if (strand1 === '-' && strand2 === '-') {\n      Gp.links.push({\n        source: `${source}-start`,\n        target: `${target}-end`,\n        loop,\n        paths,\n        ...rest,\n      })\n    } else if (strand1 === '+' && strand2 === '-') {\n      Gp.links.push({\n        source: `${source}-end`,\n        target: `${target}-end`,\n        loop,\n        paths,\n        ...rest,\n      })\n    }\n    // else {\n    //   Gp.links.push({ source: `${source}-start`, target: `${target}-end`, loop, ...rest })\n    // }\n  }\n  return Gp\n}\n\nfunction* generatePaths(links, graph) {\n  let currentLinkId = links[0].linkNum\n  let currentLinkSet = []\n  let original\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    if (currentLinkId !== link.linkNum) {\n      if (original.id) {\n        yield { links: currentLinkSet, ...original }\n      }\n      currentLinkSet = []\n      currentLinkId = link.linkNum\n    }\n    original = graph[i]\n    currentLinkSet.push([link.source.x, link.source.y])\n    currentLinkSet.push([link.target.x, link.target.y])\n  }\n}\n\nfunction* generateEdges(links, graph) {\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i]\n    const original = graph[i]\n    if (!original.id) {\n      yield {\n        links: [\n          [link.source.x, link.source.y],\n          [link.target.x, link.target.y],\n        ],\n        original,\n      }\n    }\n  }\n}\n\nconst Graph = React.forwardRef((props, ref) => {\n  const {\n    graph, // {nodes:[{id}], links:[{source,target}]\n    path = 'Edge',\n    blockSize = 1000,\n    contigThickness = 10,\n    edgeThickness = 2,\n    color = 'Rainbow',\n    width = 1000,\n    height = 1000,\n    steps = 500,\n    onFeatureClick = () => {\n      console.log('no feature click configured')\n    },\n  } = props\n  const data = useMemo(() => {\n    return reprocessGraph(graph, blockSize)\n  }, [blockSize, graph])\n\n  const links = useMemo(() => {\n    const links = data.links.map(d => Object.create(d))\n    const nodes = data.nodes.map(d => Object.create(d))\n    let max = 0\n    for (let i = 0; i < data.links.length; i++) {\n      max = Math.max(max, (data.links[i].sequence || {}).length || 0)\n    }\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id(d => d.id)\n          .distance(link => {\n            return link.sequence ? 1 : 10\n          }),\n      )\n      .force('charge', d3.forceManyBody().strength(-100))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n    for (let i = 0; i < steps; ++i) {\n      simulation.tick()\n    }\n    return links\n  }, [data, height, steps, width])\n\n  useEffect(() => {\n    // zoom logic, similar to https://observablehq.com/@d3/zoom\n    function zoomed() {\n      d3.select('.gref').attr('transform', d3.event.transform)\n    }\n    d3.select('svg').call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.1, 8])\n        .on('zoom', zoomed),\n    )\n  }, [height, ref, width])\n\n  const paths = [...generatePaths(links, data.links)]\n  const edges = [...generateEdges(links, data.links)]\n  const maxScore = edges.reduce((a, b) => {\n    return Math.max(b.original.score, a)\n  }, 0)\n  const colors = {}\n  ;(graph.paths || []).forEach(p => {\n    colors[p.name] = d3.interpolateTurbo(Math.random())\n  })\n  console.log({ paths, links })\n\n  const map = {}\n  paths.forEach(path => {\n    console.log(path.source, path.target)\n    if (path.source.endsWith('start')) {\n      map[path.source] = {\n        source: links[path.linkNum].target,\n        target: links[path.linkNum].source,\n      }\n      map[path.target] = {\n        target: links[path.linkNum].target,\n        source: links[path.linkNum].source,\n      }\n    } else {\n      console.log('here')\n      map[path.source] = {\n        source: links[path.linkNum].source,\n        target: links[path.linkNum].target,\n      }\n      map[path.target] = {\n        target: links[path.linkNum].source,\n        source: links[path.linkNum].target,\n      }\n    }\n  })\n  return (\n    <svg ref={ref} viewBox={[0, 0, width, height].toString()}>\n      <g className=\"gref\">\n        {edges.map(p => {\n          const line = d3.line().context(null)\n          const x1 = p.links[0][0]\n          const y1 = p.links[0][1]\n          let x2 = p.links[1][0]\n          let y2 = p.links[1][1]\n          const dx = x2 - x1\n          const dy = y2 - y1\n          const dr = Math.sqrt(dx * dx + dy * dy)\n          // Defaults for normal edge.\n          let drx = dr\n          let dry = dr\n          let xRot = 0 // degrees\n          let largeArc = 0 // 1 or 0\n          const sweep = 0 // 1 or 0\n\n          let path\n          if (p.original.loop) {\n            xRot = 90\n            largeArc = 1\n            drx = -30\n            dry = -20\n            x2 = x2 + 1\n            y2 = y2 + 1\n            path = `M${x1},${y1}A${drx},${dry} ${xRot},${largeArc},${sweep} ${x2},${y2}`\n          } else {\n            path = line(p.links)\n          }\n          const { source: s1, target: t1 } = map[p.original.source]\n          const { source: s2, target: t2 } = map[p.original.target]\n          // implements https://math.stackexchange.com/questions/175896/finding-a-point-along-a-line-a-certain-distance-away-from-another-point/175906\n          const m1 = (t1.y - s1.y) / (t1.x - s1.x)\n          const m2 = (t2.y - s2.y) / (t2.x - s2.x)\n          const dp1 = Math.sqrt(\n            (t1.y - s1.y) * (t1.y - s1.y) + (t1.x - s1.x) * (t1.x - s1.x),\n          )\n          const dp2 = Math.sqrt(\n            (t2.y - s2.y) * (t2.y - s2.y) + (t2.x - s2.x) * (t2.x - s2.x),\n          )\n\n          return (\n            <>\n              {p.original.paths.map(pp => {\n                const d1 = (60 + Math.random() * 50) / dp1\n                const d2 = (60 + Math.random() * 50) / dp2\n                const cx1 = (1 - d1) * s1.x + d1 * t1.x\n                const cy1 = (1 - d1) * s1.y + d1 * t1.y\n                const cx2 = (1 - d2) * s2.x + d2 * t2.x\n                const cy2 = (1 - d2) * s2.y + d2 * t2.y\n                const cpath = d3.path()\n                cpath.moveTo(x1, y1)\n                cpath.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2) //(cx1, cy1, cx2, cy2, x2, y2, 1)\n                console.log(colors, pp)\n                return (\n                  <path\n                    d={cpath}\n                    strokeWidth={2}\n                    stroke={colors[pp]}\n                    fill=\"none\"\n                    onClick={() => onFeatureClick(p.original)}\n                  />\n                )\n              })}\n            </>\n          )\n        })}\n\n        {paths.map((p, i) => {\n          const line = d3.line().context(null)\n          return (\n            <path\n              d={line(p.links)}\n              title={p.id}\n              strokeWidth={contigThickness}\n              stroke={\n                color.startsWith('Just')\n                  ? color.replace('Just', '').toLowerCase()\n                  : d3.hsl(d3[`interpolate${color}`](i / paths.length)).darker()\n              }\n              fill=\"none\"\n              onClick={() => onFeatureClick(p)}\n            >\n              <title>{p.id}</title>\n            </path>\n          )\n        })}\n      </g>\n    </svg>\n  )\n})\n\n// // <path\n//                 key={path.toString()}\n//                 d={path}\n//                 strokeWidth={score * edgeThickness}\n//                 stroke={d3.interpolateGreys(score / maxScore)}\n//                 fill=\"none\"\n//                 onClick={() => onFeatureClick(p.original)}\n//               />\n//\n//\n//\n//const cx1 = ((x1 + x2) * 1) / 4\n//const cy1 = ((y1 + y2) * 1) / 4\n//const cx2 = ((x1 + x2) * 3) / 4\n//const cy2 = ((y1 + y2) * 3) / 4\n////const yp = (y1 + y2) / 2\n//const cpath = d3.path()\n//cpath.moveTo(x1, y1)\n//const c1 = 20\n//if (x1 < x2 && y1 < y2) {\n//}\n//\n//\n//\n//\n//debugging\n//<line x1={s1.x} x2={t1.x} y1={s1.y} y2={t1.y} stroke=\"rgba(0,0,0,0.5)\" />\n// <rect x={cx2} y={cy2} width={2} height={2} fill=\"red\" />\n// <rect x={cx2} y={cy2} width={2} height={2} fill=\"green\" />\n// <rect x={x2} y={y2} width={2} height={2} fill=\"blue\" />\n// <rect x={x2} y={y2} width={2} height={2} fill=\"yellow\" />\nexport { Graph }\n","import React, { useState, useRef } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { Graph } from './Graph'\nimport { saveAs } from 'file-saver'\nimport { serialize } from './util'\n\nexport function GraphContainer(props) {\n  const [color, setColor] = useState('Rainbow')\n  const [path, setPath] = useState('Edge')\n  const ref = useRef()\n  return (\n    <div>\n      <Form.Group>\n        <Form.Control\n          value={color}\n          onChange={event => setColor(event.target.value)}\n          as=\"select\"\n        >\n          <option>JustGrey</option>\n          <option>Turbo</option>\n          <option>Rainbow</option>\n          <option>Spectral</option>\n          <option>Viridis</option>\n          <option>RdYlBu</option>\n        </Form.Control>\n        <Form.Control\n          value={path}\n          onChange={event => setPath(event.target.value)}\n          as=\"select\"\n        >\n          <option>Edge</option>\n          <option>Node</option>\n          <option>Edge+node</option>\n          <option>None</option>\n        </Form.Control>\n        <Button onClick={() => saveAs(serialize(ref.current))}>Export SVG</Button>\n      </Form.Group>\n      <Graph ref={ref} {...props} color={color} path={path} />\n    </div>\n  )\n}\n","export function parseGFA(file) {\n  const graph = { nodes: [], links: [] }\n  for (const line of file.split('\\n')) {\n    if (line.startsWith('S')) {\n      const [, name, sequence, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.nodes.push({ id: name, sequence, tags })\n    } else if (line.startsWith('L')) {\n      const [, source, strand1, target, strand2, cigar, ...rest] = line.split('\\t')\n      const tags = {}\n      for (let i = 0; i < rest.length; i++) {\n        const [name, type, val] = rest[i].split(':')\n        if (type === 'i') {\n          tags[name] = +val\n        } else if (type === 'Z') {\n          tags[name] = val\n        }\n      }\n      graph.links.push({ source, target, strand1, strand2, cigar, tags })\n    }\n  }\n  return graph\n}\n\n// adapted from https://observablehq.com/@mbostock/saving-svg\nexport function serialize(svg) {\n  const xmlns = 'http://www.w3.org/2000/xmlns/'\n  const xlinkns = 'http://www.w3.org/1999/xlink'\n  const svgns = 'http://www.w3.org/2000/svg'\n\n  svg = svg.cloneNode(true)\n  const fragment = `${window.location.href}#`\n  const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT, null, false)\n  while (walker.nextNode()) {\n    for (const attr of walker.currentNode.attributes) {\n      if (attr.value.includes(fragment)) {\n        attr.value = attr.value.replace(fragment, '#')\n      }\n    }\n  }\n  svg.setAttributeNS(xmlns, 'xmlns', svgns)\n  svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns)\n  const serializer = new window.XMLSerializer()\n  const string = serializer.serializeToString(svg)\n  return new Blob([string], { type: 'image/svg+xml' })\n}\n","import React, { useCallback, useState } from 'react'\nimport { OpenDialog } from './OpenDialog'\nimport { FeatureDialog } from './FeatureDialog'\nimport { GraphContainer } from './GraphContainer'\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport graph from './toy_example.json'\n\nfunction Header({ onOpen }) {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">graphgenome browser</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <NavDropdown title=\"File\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item onClick={() => onOpen(true)}>Open</NavDropdown.Item>\n          </NavDropdown>\n          <Nav.Link href=\"#link\">About</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nfunction App() {\n  const [show, setShow] = useState(false)\n  const [featureData, setFeatureData] = useState()\n  const callback = useCallback(data => {\n    setFeatureData(data)\n  }, [])\n  return (\n    <div>\n      <Header\n        onOpen={() => {\n          setShow(true)\n        }}\n      />\n      <OpenDialog show={show} onHide={() => setShow(false)} />\n      {featureData ? (\n        <FeatureDialog\n          data={featureData}\n          onModal={data => {\n            setFeatureData(data)\n          }}\n          onHide={() => {\n            setFeatureData(undefined)\n          }}\n        />\n      ) : null}\n      <div className=\"flexcontainer\">\n        <div id=\"sidebar\" className=\"sidebar\">\n          <GraphContainer graph={graph} onFeatureClick={callback} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}